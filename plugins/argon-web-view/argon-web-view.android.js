"use strict";
var common = require("./argon-web-view-common");
var view_1 = require("ui/core/view");
var AndroidWebInterface = io.argonjs.AndroidWebInterface;
var ArgonWebView = (function (_super) {
    __extends(ArgonWebView, _super);
    function ArgonWebView() {
        var _this = _super.call(this) || this;
        _this.currentUrl = "";
        android.webkit.WebView.setWebContentsDebuggingEnabled(true);
        _this.on(view_1.View.loadedEvent, function () {
            // Make transparent
            //this.backgroundColor = new Color(0, 255, 255, 255);
            //this.android.setBackgroundColor(android.graphics.Color.TRANSPARENT);
            var settings = _this.android.getSettings();
            var userAgent = settings.getUserAgentString();
            settings.setUserAgentString(userAgent + " Argon");
            settings.setJavaScriptEnabled(true);
            settings.setDomStorageEnabled(true);
            // Remember a particular id for each webview
            if (!_this.id) {
                _this.id = Date.now().toString();
            }
            ArgonWebView.layersById[_this.id] = _this;
            // Inject Javascript Interface
            _this.android.addJavascriptInterface(new (AndroidWebInterface.extend({
                onArgonEvent: function (id, event, data) {
                    var self = ArgonWebView.layersById[id];
                    if (self) {
                        if (event === "argon") {
                            // just in case we thought below that the page was not an
                            // argon page, perhaps because argon.js loaded asyncronously 
                            // and the programmer didn't set up an argon meta tag
                            self._setIsArgonApp(true);
                            self._handleArgonMessage(data);
                        }
                        else if (event === "log") {
                            self._handleLogMessage(data);
                        }
                    }
                },
            }))(new java.lang.String(_this.id)), "__argon_android__");
        });
        _this.on(ArgonWebView.loadStartedEvent, function (args) {
            _this._didCommitNavigation();
            _this.currentUrl = args.url;
            _this.set('title', _this.android.getTitle());
            //this.set('progress', this.android.getProgress());
            // Hook into the logging
            var injectLoggers = function () {
                var logger = window.console.log;
                window.console.log = function () {
                    if (window["__argon_android__"]) {
                        window["__argon_android__"].emit("log", JSON.stringify({ type: 'log', args: [].slice.call(arguments) }));
                    }
                    logger.apply(window.console, arguments);
                };
                var warnLogger = window.console.warn;
                window.console.warn = function () {
                    if (window["__argon_android__"]) {
                        window["__argon_android__"].emit("log", JSON.stringify({ type: 'warn', args: [].slice.call(arguments) }));
                    }
                    warnLogger.apply(window.console, arguments);
                };
                var errorLogger = window.console.error;
                window.console.error = function () {
                    if (window["__argon_android__"]) {
                        window["__argon_android__"].emit("log", JSON.stringify({ type: 'error', args: [].slice.call(arguments) }));
                    }
                    errorLogger.apply(window.console, arguments);
                };
                window.addEventListener('error', function (e) {
                    console.error('Unhandled Error: ' + e.message + ' (' + e.source + ':' + e.lineno + ')');
                }, false);
            };
            _this.evaluateJavascript("(" + injectLoggers.toString() + ")()");
        });
        _this.on(ArgonWebView.loadFinishedEvent, function (args) {
            _this.set('title', _this.android.getTitle());
            _this.set('progress', _this.android.getProgress());
        });
        return _this;
    }
    Object.defineProperty(ArgonWebView.prototype, "progress", {
        get: function () {
            return this.android.getProgress();
        },
        enumerable: true,
        configurable: true
    });
    ArgonWebView.prototype._setIsArgonApp = function (flag) {
        console.log("_setIsArgonApp: " + flag);
        if (!this.isArgonApp && flag) {
            this.android.setBackgroundColor(android.graphics.Color.TRANSPARENT);
            this.set("isArgonApp", true);
        }
        else if (this.isArgonApp && !flag) {
            this.android.setBackgroundColor(android.graphics.Color.WHITE);
            this.set("isArgonApp", false);
        }
    };
    ArgonWebView.prototype.evaluateJavascript = function (script) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.android.evaluateJavascript(script, new android.webkit.ValueCallback({
                onReceiveValue: function (value) {
                    resolve(value);
                },
            }));
        });
    };
    ArgonWebView.prototype.bringToFront = function () {
        this.android.bringToFront();
    };
    ArgonWebView.prototype.getCurrentUrl = function () {
        // on Android, the url property isn't updated until after the page appears
        // we need it updated as soon as the load starts
        return this.currentUrl;
    };
    ArgonWebView.prototype.getWebViewVersion = function () {
        var settings = this.android.getSettings();
        var userAgent = settings.getUserAgentString();
        var regex = /Chrome\/([0-9]+)/i;
        var match = regex.exec(userAgent);
        if (match != null && match.length > 1) {
            return Number(match[1]);
        }
        return -1;
    };
    return ArgonWebView;
}(common.ArgonWebView));
ArgonWebView.layersById = {};
exports.ArgonWebView = ArgonWebView;
//# sourceMappingURL=data:application/json;base64,