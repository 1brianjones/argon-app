"use strict";
require('globals');
var APIBase = (function () {
    function APIBase() {
    }
    APIBase.prototype.setStateUpdateCallback = function (cb) {
        this.callback = cb;
    };
    APIBase.prototype.getViewerScaleFactor = function () {
        // static const float VIRTUAL_FOV_Y_DEGS = 85.0f;
        // Get the y-dimension of the physical camera field of view
        var cameraCalibration = this.getCameraDevice().getCameraCalibration();
        if (!cameraCalibration)
            throw new Error('Unable to get camera calibration');
        var device = this.getDevice();
        if (!device.isViewerActive())
            throw new Error('Viewer is not active');
        var fov = cameraCalibration.getFieldOfViewRads();
        var cameraFovYRad = fov.y;
        var viewer = device.getSelectedViewer();
        if (!viewer)
            throw new Error('No viewer is selected');
        // Get the y-dimension of the virtual camera field of view
        var viewerFOV = viewer.getFieldOfView();
        var viewerFOVy = viewerFOV.y + viewerFOV.z;
        var virtualFovYRad = viewerFOVy * Math.PI / 180;
        //    float virtualFovYRad = VIRTUAL_FOV_Y_DEGS * M_PI / 180;
        // The viewer-scale factor represents the proportion of the viewport that is filled by
        // the video background when projected onto the same plane.
        // In order to calculate this, let 'd' be the distance between the cameras and the plane.
        // The height of the projected image 'h' on this plane can then be calculated:
        //   tan(fov/2) = h/2d
        // which rearranges to:
        //   2d = h/tan(fov/2)
        // Since 'd' is the same for both cameras, we can combine the equations for the two cameras:
        //   hPhysical/tan(fovPhysical/2) = hVirtual/tan(fovVirtual/2)
        // Which rearranges to:
        //   hPhysical/hVirtual = tan(fovPhysical/2)/tan(fovVirtual/2)
        // ... which is the scene-scale factor
        return Math.tan(cameraFovYRad / 2) / Math.tan(virtualFovYRad / 2);
    };
    return APIBase;
}());
exports.APIBase = APIBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnVmb3JpYS1jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2dWZvcmlhLWNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBT2xCO0lBQUE7SUF1REEsQ0FBQztJQXRDRyx3Q0FBc0IsR0FBdEIsVUFBdUIsRUFBMEI7UUFDN0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELHNDQUFvQixHQUFwQjtRQUNJLGlEQUFpRDtRQUVqRCwyREFBMkQ7UUFDM0QsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUN4RSxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQzVFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUV0RSxJQUFNLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ25ELElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFdkQsMERBQTBEO1FBQzFELElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBTSxjQUFjLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ2xELDZEQUE2RDtRQUU3RCxzRkFBc0Y7UUFDdEYsMkRBQTJEO1FBQzNELHlGQUF5RjtRQUN6Riw4RUFBOEU7UUFDOUUsc0JBQXNCO1FBQ3RCLHVCQUF1QjtRQUN2QixzQkFBc0I7UUFDdEIsNEZBQTRGO1FBQzVGLDhEQUE4RDtRQUM5RCx1QkFBdUI7UUFDdkIsOERBQThEO1FBQzlELHNDQUFzQztRQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQUFDLEFBdkRELElBdURDO0FBdkRxQiwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ2dsb2JhbHMnKVxuaW1wb3J0IGRlZiA9IHJlcXVpcmUoJ25hdGl2ZXNjcmlwdC12dWZvcmlhJylcbmltcG9ydCBvYnNlcnZhYmxlID0gcmVxdWlyZSgnZGF0YS9vYnNlcnZhYmxlJyk7XG5pbXBvcnQgcGxhdGZvcm0gPSByZXF1aXJlKCdwbGF0Zm9ybScpO1xuaW1wb3J0IGFwcGxpY2F0aW9uID0gcmVxdWlyZSgnYXBwbGljYXRpb24nKTtcbmltcG9ydCB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzL3V0aWxzJyk7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBUElCYXNlIGltcGxlbWVudHMgZGVmLkFQSSB7XG4gICAgYWJzdHJhY3Qgc2V0TGljZW5zZUtleShsaWNlbnNlS2V5OnN0cmluZykgOiBib29sZWFuO1xuICAgIGFic3RyYWN0IHNldEhpbnQoaGludDpkZWYuSGludCx2YWx1ZTpudW1iZXIpIDogYm9vbGVhbjtcbiAgICBhYnN0cmFjdCBpbml0KCkgOiBQcm9taXNlPGRlZi5Jbml0UmVzdWx0PjtcbiAgICBhYnN0cmFjdCBkZWluaXQoKSA6IHZvaWQ7XG4gICAgYWJzdHJhY3QgZ2V0Q2FtZXJhRGV2aWNlKCkgOiBkZWYuQ2FtZXJhRGV2aWNlO1xuICAgIGFic3RyYWN0IGdldERldmljZSgpIDogZGVmLkRldmljZTtcbiAgICBhYnN0cmFjdCBnZXRSZW5kZXJlcigpIDogZGVmLlJlbmRlcmVyO1xuICAgIGFic3RyYWN0IGluaXRPYmplY3RUcmFja2VyKCkgOiBib29sZWFuO1xuICAgIGFic3RyYWN0IGdldE9iamVjdFRyYWNrZXIoKSA6IGRlZi5PYmplY3RUcmFja2VyfHVuZGVmaW5lZDtcbiAgICBhYnN0cmFjdCBkZWluaXRPYmplY3RUcmFja2VyKCkgOiBib29sZWFuO1xuICAgIGFic3RyYWN0IHNldFNjYWxlRmFjdG9yKGY6bnVtYmVyKTtcbiAgICBhYnN0cmFjdCBnZXRTY2FsZUZhY3RvcigpIDogbnVtYmVyOyBcbiAgICBhYnN0cmFjdCBvblN1cmZhY2VDaGFuZ2VkKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcikgOiB2b2lkO1xuICAgIFxuICAgIHByb3RlY3RlZCBjYWxsYmFjazooc3RhdGU6ZGVmLlN0YXRlKT0+dm9pZDtcblxuICAgIHNldFN0YXRlVXBkYXRlQ2FsbGJhY2soY2I6KHN0YXRlOmRlZi5TdGF0ZSk9PnZvaWQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICAgIH1cblxuICAgIGdldFZpZXdlclNjYWxlRmFjdG9yKCkge1xuICAgICAgICAvLyBzdGF0aWMgY29uc3QgZmxvYXQgVklSVFVBTF9GT1ZfWV9ERUdTID0gODUuMGY7XG5cbiAgICAgICAgLy8gR2V0IHRoZSB5LWRpbWVuc2lvbiBvZiB0aGUgcGh5c2ljYWwgY2FtZXJhIGZpZWxkIG9mIHZpZXdcbiAgICAgICAgY29uc3QgY2FtZXJhQ2FsaWJyYXRpb24gPSB0aGlzLmdldENhbWVyYURldmljZSgpLmdldENhbWVyYUNhbGlicmF0aW9uKCk7XG4gICAgICAgIGlmICghY2FtZXJhQ2FsaWJyYXRpb24pIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdldCBjYW1lcmEgY2FsaWJyYXRpb24nKTtcbiAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5nZXREZXZpY2UoKTtcbiAgICAgICAgaWYgKCFkZXZpY2UuaXNWaWV3ZXJBY3RpdmUoKSkgdGhyb3cgbmV3IEVycm9yKCdWaWV3ZXIgaXMgbm90IGFjdGl2ZScpO1xuXG4gICAgICAgIGNvbnN0IGZvdiA9IGNhbWVyYUNhbGlicmF0aW9uLmdldEZpZWxkT2ZWaWV3UmFkcygpO1xuICAgICAgICBjb25zdCBjYW1lcmFGb3ZZUmFkID0gZm92Lnk7XG4gICAgICAgIGNvbnN0IHZpZXdlciA9IGRldmljZS5nZXRTZWxlY3RlZFZpZXdlcigpO1xuICAgICAgICBpZiAoIXZpZXdlcikgIHRocm93IG5ldyBFcnJvcignTm8gdmlld2VyIGlzIHNlbGVjdGVkJyk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSB5LWRpbWVuc2lvbiBvZiB0aGUgdmlydHVhbCBjYW1lcmEgZmllbGQgb2Ygdmlld1xuICAgICAgICBjb25zdCB2aWV3ZXJGT1YgPSB2aWV3ZXIuZ2V0RmllbGRPZlZpZXcoKTtcbiAgICAgICAgY29uc3Qgdmlld2VyRk9WeSA9IHZpZXdlckZPVi55ICsgdmlld2VyRk9WLno7XG4gICAgICAgIGNvbnN0IHZpcnR1YWxGb3ZZUmFkID0gdmlld2VyRk9WeSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgIC8vICAgIGZsb2F0IHZpcnR1YWxGb3ZZUmFkID0gVklSVFVBTF9GT1ZfWV9ERUdTICogTV9QSSAvIDE4MDtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSB2aWV3ZXItc2NhbGUgZmFjdG9yIHJlcHJlc2VudHMgdGhlIHByb3BvcnRpb24gb2YgdGhlIHZpZXdwb3J0IHRoYXQgaXMgZmlsbGVkIGJ5XG4gICAgICAgIC8vIHRoZSB2aWRlbyBiYWNrZ3JvdW5kIHdoZW4gcHJvamVjdGVkIG9udG8gdGhlIHNhbWUgcGxhbmUuXG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGNhbGN1bGF0ZSB0aGlzLCBsZXQgJ2QnIGJlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjYW1lcmFzIGFuZCB0aGUgcGxhbmUuXG4gICAgICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIHByb2plY3RlZCBpbWFnZSAnaCcgb24gdGhpcyBwbGFuZSBjYW4gdGhlbiBiZSBjYWxjdWxhdGVkOlxuICAgICAgICAvLyAgIHRhbihmb3YvMikgPSBoLzJkXG4gICAgICAgIC8vIHdoaWNoIHJlYXJyYW5nZXMgdG86XG4gICAgICAgIC8vICAgMmQgPSBoL3Rhbihmb3YvMilcbiAgICAgICAgLy8gU2luY2UgJ2QnIGlzIHRoZSBzYW1lIGZvciBib3RoIGNhbWVyYXMsIHdlIGNhbiBjb21iaW5lIHRoZSBlcXVhdGlvbnMgZm9yIHRoZSB0d28gY2FtZXJhczpcbiAgICAgICAgLy8gICBoUGh5c2ljYWwvdGFuKGZvdlBoeXNpY2FsLzIpID0gaFZpcnR1YWwvdGFuKGZvdlZpcnR1YWwvMilcbiAgICAgICAgLy8gV2hpY2ggcmVhcnJhbmdlcyB0bzpcbiAgICAgICAgLy8gICBoUGh5c2ljYWwvaFZpcnR1YWwgPSB0YW4oZm92UGh5c2ljYWwvMikvdGFuKGZvdlZpcnR1YWwvMilcbiAgICAgICAgLy8gLi4uIHdoaWNoIGlzIHRoZSBzY2VuZS1zY2FsZSBmYWN0b3JcbiAgICAgICAgcmV0dXJuIE1hdGgudGFuKGNhbWVyYUZvdllSYWQgLyAyKSAvIE1hdGgudGFuKHZpcnR1YWxGb3ZZUmFkIC8gMik7XG4gICAgfVxufVxuIl19