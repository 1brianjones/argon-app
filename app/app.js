"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
if (application.android) {
    application.mainModule = "entry-page";
}
else {
    application.mainModule = "main-page";
}
application.cssFile = "./app.css";
/***
 * Creates a performance.now() function
 */
if (!global.performance) {
    global.performance = {};
}
if (!global.performance.now) {
    if (application.android) {
        global.performance.now = function () {
            return java.lang.System.nanoTime() / 1000000;
        };
    }
    else if (application.ios) {
        global.performance.now = function () {
            return CACurrentMediaTime() * 1000;
        };
    }
}
var AppViewModel_1 = require("./components/common/AppViewModel");
var nativescript_urlhandler_1 = require("@speigg/nativescript-urlhandler");
nativescript_urlhandler_1.handleOpenURL(function (appURL) {
    if (!appURL)
        return;
    AppViewModel_1.appViewModel.launchedFromUrl = true;
    AppViewModel_1.appViewModel.ready.then(function () {
        console.log('Received url request: ' + appURL);
        var urlValue = appURL.params.get('url');
        if (urlValue) {
            AppViewModel_1.appViewModel.openUrl(decodeURIComponent(urlValue));
        }
        else {
            var url = 'https://' + appURL.path;
            AppViewModel_1.appViewModel.openUrl(url);
        }
    });
});
// Google Analytics
var analytics = require("./components/common/analytics");
if (application.ios) {
    var MyDelegate = (function (_super) {
        __extends(MyDelegate, _super);
        function MyDelegate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
            analytics.initAnalytics();
            return true;
        };
        return MyDelegate;
    }(UIResponder));
    MyDelegate.ObjCProtocols = [UIApplicationDelegate];
    application.ios.delegate = MyDelegate;
}
else {
    application.on(application.launchEvent, function (args) {
        analytics.initAnalytics();
    });
}
application.start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTRDO0FBQzVDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFBO0FBQ3pDLENBQUM7QUFBQyxJQUFJLENBQUMsQ0FBQztJQUNKLFdBQVcsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFBO0FBQ3hDLENBQUM7QUFDRCxXQUFXLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUVsQzs7R0FFRztBQUNILEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdEIsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDakQsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRztZQUNyQixNQUFNLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDdkMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztBQUNMLENBQUM7QUFFRCxpRUFBZ0U7QUFDaEUsMkVBQXdFO0FBQ3hFLHVDQUFhLENBQUMsVUFBQyxNQUFjO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQUMsTUFBTSxDQUFDO0lBQ3BCLDJCQUFZLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUNwQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1gsMkJBQVksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFNLEdBQUcsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNyQywyQkFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILG1CQUFtQjtBQUNuQix5REFBMkQ7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEI7UUFBeUIsOEJBQVc7UUFBcEM7O1FBTUEsQ0FBQztRQUpHLDZEQUF3QyxHQUF4QyxVQUF5QyxXQUEwQixFQUFFLGFBQWtCO1lBQ25GLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDTCxpQkFBQztJQUFELENBQUMsQUFORCxDQUF5QixXQUFXO0lBQ2xCLHdCQUFhLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBTTFELFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUMxQyxDQUFDO0FBQUMsSUFBSSxDQUFDLENBQUM7SUFDSixXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxJQUFJO1FBQ2xELFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBwbGljYXRpb24gPSByZXF1aXJlKFwiYXBwbGljYXRpb25cIik7XG5pZiAoYXBwbGljYXRpb24uYW5kcm9pZCkge1xuICAgIGFwcGxpY2F0aW9uLm1haW5Nb2R1bGUgPSBcImVudHJ5LXBhZ2VcIlxufSBlbHNlIHtcbiAgICBhcHBsaWNhdGlvbi5tYWluTW9kdWxlID0gXCJtYWluLXBhZ2VcIlxufVxuYXBwbGljYXRpb24uY3NzRmlsZSA9IFwiLi9hcHAuY3NzXCI7XG5cbi8qKipcbiAqIENyZWF0ZXMgYSBwZXJmb3JtYW5jZS5ub3coKSBmdW5jdGlvblxuICovXG5pZiAoIWdsb2JhbC5wZXJmb3JtYW5jZSkge1xuICAgIGdsb2JhbC5wZXJmb3JtYW5jZSA9IHt9O1xufVxuaWYgKCFnbG9iYWwucGVyZm9ybWFuY2Uubm93KSB7XG4gICAgaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcbiAgICAgICAgZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBqYXZhLmxhbmcuU3lzdGVtLm5hbm9UaW1lKCkgLyAxMDAwMDAwO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb24uaW9zKSB7XG4gICAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZS5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBDQUN1cnJlbnRNZWRpYVRpbWUoKSAqIDEwMDA7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5pbXBvcnQgeyBhcHBWaWV3TW9kZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvY29tbW9uL0FwcFZpZXdNb2RlbCc7XG5pbXBvcnQgeyBoYW5kbGVPcGVuVVJMLCBBcHBVUkwgfSBmcm9tICdAc3BlaWdnL25hdGl2ZXNjcmlwdC11cmxoYW5kbGVyJztcbmhhbmRsZU9wZW5VUkwoKGFwcFVSTDogQXBwVVJMKSA9PiB7XG4gICAgaWYgKCFhcHBVUkwpIHJldHVybjtcbiAgICBhcHBWaWV3TW9kZWwubGF1bmNoZWRGcm9tVXJsID0gdHJ1ZTtcbiAgICBhcHBWaWV3TW9kZWwucmVhZHkudGhlbigoKT0+e1xuICAgICAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgdXJsIHJlcXVlc3Q6ICcgKyBhcHBVUkwpO1xuICAgICAgICBjb25zdCB1cmxWYWx1ZSA9IGFwcFVSTC5wYXJhbXMuZ2V0KCd1cmwnKTtcbiAgICAgICAgaWYgKHVybFZhbHVlKSB7XG4gICAgICAgICAgICBhcHBWaWV3TW9kZWwub3BlblVybChkZWNvZGVVUklDb21wb25lbnQodXJsVmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9ICdodHRwczovLycgKyBhcHBVUkwucGF0aDtcbiAgICAgICAgICAgIGFwcFZpZXdNb2RlbC5vcGVuVXJsKHVybCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG4vLyBHb29nbGUgQW5hbHl0aWNzXG5pbXBvcnQgKiBhcyBhbmFseXRpY3MgZnJvbSBcIi4vY29tcG9uZW50cy9jb21tb24vYW5hbHl0aWNzXCI7XG5pZiAoYXBwbGljYXRpb24uaW9zKSB7XG4gICAgY2xhc3MgTXlEZWxlZ2F0ZSBleHRlbmRzIFVJUmVzcG9uZGVyIGltcGxlbWVudHMgVUlBcHBsaWNhdGlvbkRlbGVnYXRlIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBPYmpDUHJvdG9jb2xzID0gW1VJQXBwbGljYXRpb25EZWxlZ2F0ZV07XG4gICAgICAgIGFwcGxpY2F0aW9uRGlkRmluaXNoTGF1bmNoaW5nV2l0aE9wdGlvbnMoYXBwbGljYXRpb246IFVJQXBwbGljYXRpb24sIGxhdW5jaE9wdGlvbnM6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgYW5hbHl0aWNzLmluaXRBbmFseXRpY3MoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGxpY2F0aW9uLmlvcy5kZWxlZ2F0ZSA9IE15RGVsZWdhdGU7XG59IGVsc2Uge1xuICAgIGFwcGxpY2F0aW9uLm9uKGFwcGxpY2F0aW9uLmxhdW5jaEV2ZW50LCBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICBhbmFseXRpY3MuaW5pdEFuYWx5dGljcygpO1xuICAgIH0pO1xufVxuXG5hcHBsaWNhdGlvbi5zdGFydCgpO1xuIl19