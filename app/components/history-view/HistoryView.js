"use strict";
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var HistoryViewModel = (function (_super) {
    __extends(HistoryViewModel, _super);
    function HistoryViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.historyList = bookmarks_1.historyList;
        return _this;
    }
    return HistoryViewModel;
}(observable_1.Observable));
exports.HistoryViewModel = HistoryViewModel;
exports.viewModel = new HistoryViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.historyList.indexOf(item);
    bookmarks_1.historyList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    // todo: fix for Android
    if (application.ios) {
        contentView.on(gestures_1.GestureTypes.pan, function (data) {
            if (data.state === gestures_1.GestureStateTypes.began) {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
            contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
            if (data.state === gestures_1.GestureStateTypes.ended) {
                editing = false;
                var open = contentView.translateX < swipeLimit * 0.75;
                toggleCellSwipeState(cell, open);
            }
            else {
                deleteView.visibility = 'visible';
            }
        });
    }
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIaXN0b3J5Vmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTJDO0FBQzNDLDhDQUEyQztBQUczQyxpREFBNkQ7QUFDN0QsdURBQW1EO0FBRW5ELHdDQUtxQjtBQUVyQixrQ0FBdUM7QUFFdkM7SUFBc0Msb0NBQVU7SUFBaEQ7UUFBQSxxRUFFQztRQURHLGlCQUFXLEdBQUcsdUJBQVcsQ0FBQzs7SUFDOUIsQ0FBQztJQUFELHVCQUFDO0FBQUQsQ0FBQyxBQUZELENBQXNDLHVCQUFVLEdBRS9DO0FBRlksNENBQWdCO0FBR2hCLFFBQUEsU0FBUyxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztBQUVoRCxJQUFJLFFBQWlCLENBQUM7QUFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRXBCLGtCQUF5QixJQUFJO0lBQ3pCLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLFFBQVEsQ0FBQyxjQUFjLEdBQUcsaUJBQVMsQ0FBQztBQUN4QyxDQUFDO0FBSEQsNEJBR0M7QUFFRCxlQUFzQixJQUFJO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUFDLE1BQU0sQ0FBQTtJQUNuQixhQUFhLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQUksR0FBaUIsSUFBSSxDQUFDLE1BQWUsQ0FBQyxjQUFjLENBQUM7SUFDN0QsMkJBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFMRCxzQkFLQztBQUVELGtCQUF5QixJQUFJO0lBQ3pCLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLElBQUksSUFBSSxHQUFpQixJQUFJLENBQUMsTUFBZSxDQUFDLGNBQWMsQ0FBQztJQUM3RCxJQUFJLENBQUMsR0FBRyx1QkFBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyx1QkFBVyxDQUFDLE1BQU0s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QUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSAnYXBwbGljYXRpb24nO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHtWaWV3fSBmcm9tICd1aS9jb3JlL3ZpZXcnO1xuaW1wb3J0IHtMaXN0VmlldyxJdGVtRXZlbnREYXRhfSBmcm9tICd1aS9saXN0LXZpZXcnO1xuaW1wb3J0IHtCb29rbWFya0l0ZW0sIGhpc3RvcnlMaXN0fSBmcm9tICcuLi9jb21tb24vYm9va21hcmtzJ1xuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnXG5cbmltcG9ydCB7XG4gIEdlc3R1cmVUeXBlcyxcbiAgR2VzdHVyZVN0YXRlVHlwZXMsXG4gIFBhbkdlc3R1cmVFdmVudERhdGEsXG4gIEdlc3R1cmVFdmVudERhdGEsXG59IGZyb20gJ3VpL2dlc3R1cmVzJztcblxuaW1wb3J0IHtBbmltYXRpb25DdXJ2ZX0gZnJvbSAndWkvZW51bXMnXG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5Vmlld01vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgaGlzdG9yeUxpc3QgPSBoaXN0b3J5TGlzdDtcbn1cbmV4cG9ydCBjb25zdCB2aWV3TW9kZWwgPSBuZXcgSGlzdG9yeVZpZXdNb2RlbCgpO1xuXG5sZXQgbGlzdFZpZXc6TGlzdFZpZXc7XG5sZXQgZWRpdGluZyA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoYXJncykge1xuICAgIGxpc3RWaWV3ID0gYXJncy5vYmplY3Q7XG4gICAgbGlzdFZpZXcuYmluZGluZ0NvbnRleHQgPSB2aWV3TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhcChhcmdzKSB7XG4gICAgaWYgKGVkaXRpbmcpIHJldHVyblxuICAgIGNsb3NlQWxsQ2VsbHMoKTtcbiAgICB2YXIgaXRlbTpCb29rbWFya0l0ZW0gPSAoYXJncy5vYmplY3QgYXMgVmlldykuYmluZGluZ0NvbnRleHQ7XG4gICAgYXBwVmlld01vZGVsLmxvYWRVcmwoaXRlbS51cmkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWxldGUoYXJncykge1xuICAgIGNsb3NlQWxsQ2VsbHMoKTtcbiAgICB2YXIgaXRlbTpCb29rbWFya0l0ZW0gPSAoYXJncy5vYmplY3QgYXMgVmlldykuYmluZGluZ0NvbnRleHQ7XG4gICAgdmFyIGkgPSBoaXN0b3J5TGlzdC5pbmRleE9mKGl0ZW0pO1xuICAgIGhpc3RvcnlMaXN0LnNwbGljZShpLCAxKTtcbn1cblxuY29uc3Qgc3dpcGVMaW1pdCA9IC02NDtcblxuaW50ZXJmYWNlIENlbGxWaWV3cyB7XG4gICAgY29udGVudFZpZXc6VmlldywgXG4gICAgZGVsZXRlVmlldzpWaWV3XG59XG5cbmxldCBvcGVuQ2VsbHM6QXJyYXk8Q2VsbFZpZXdzPiA9IFtdXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1Mb2FkZWQoYXJncykge1xuICAgIHZhciBpdGVtVmlldzpWaWV3ID0gYXJncy5vYmplY3Q7XG4gICAgdmFyIGNvbnRlbnRWaWV3ID0gaXRlbVZpZXcuZ2V0Vmlld0J5SWQoJ2NvbnRlbnQnKTtcbiAgICB2YXIgZGVsZXRlVmlldyA9IGl0ZW1WaWV3LmdldFZpZXdCeUlkKCdkZWxldGUnKTtcbiAgICB2YXIgY2VsbCA9IHtjb250ZW50VmlldywgZGVsZXRlVmlld307XG4gICAgXG4gICAgdmFyIHBhblN0YXJ0PTA7XG4gICAgLy8gdG9kbzogZml4IGZvciBBbmRyb2lkXG4gICAgaWYgKGFwcGxpY2F0aW9uLmlvcykge1xuICAgICAgICBjb250ZW50Vmlldy5vbihHZXN0dXJlVHlwZXMucGFuLCAoZGF0YTpQYW5HZXN0dXJlRXZlbnREYXRhKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0ZSA9PT0gR2VzdHVyZVN0YXRlVHlwZXMuYmVnYW4pIHtcbiAgICAgICAgICAgICAgICBwYW5TdGFydCA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVg7XG4gICAgICAgICAgICAgICAgY2xvc2VBbGxDZWxscyhjZWxsKTtcbiAgICAgICAgICAgICAgICBlZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGVudFZpZXcudHJhbnNsYXRlWCA9IE1hdGgubWluKE1hdGgubWF4KHBhblN0YXJ0ICsgZGF0YS5kZWx0YVgsIC0xMDAwKSwgMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlID09PSBHZXN0dXJlU3RhdGVUeXBlcy5lbmRlZCkge1xuICAgICAgICAgICAgICAgIGVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgb3BlbiA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPCBzd2lwZUxpbWl0KjAuNzU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbCwgb3Blbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VBbGxDZWxscyhleGNlcHRDZWxsPzpDZWxsVmlld3MpIHtcbiAgICBvcGVuQ2VsbHMuZm9yRWFjaCgoY2VsbCk9PntcbiAgICAgICAgaWYgKGNlbGwgIT09IGV4Y2VwdENlbGwpIHRvZ2dsZUNlbGxTd2lwZVN0YXRlKGNlbGwsIGZhbHNlKTtcbiAgICB9KVxuICAgIG9wZW5DZWxscyA9IGV4Y2VwdENlbGwgPyBbZXhjZXB0Q2VsbF0gOiBbXTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbDpDZWxsVmlld3MsIG9wZW46Ym9vbGVhbikge1xuICAgIGNvbnN0IGZpbmFsVHJhbnNsYXRlWCA9IG9wZW4gPyBzd2lwZUxpbWl0IDogMFxuICAgIGNlbGwuY29udGVudFZpZXcuYW5pbWF0ZSh7XG4gICAgICAgIHRyYW5zbGF0ZTp7eDpmaW5hbFRyYW5zbGF0ZVgsIHk6MH0sXG4gICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlSW5PdXRcbiAgICB9KS50aGVuKCgpPT57XG4gICAgICAgIGNlbGwuY29udGVudFZpZXcudHJhbnNsYXRlWCA9IGZpbmFsVHJhbnNsYXRlWDtcbiAgICAgICAgaWYgKCFvcGVuKSBjZWxsLmRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICdjb2xsYXBzZSc7XG4gICAgfSk7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgICAgb3BlbkNlbGxzLnB1c2goY2VsbCk7XG4gICAgfVxufSJdfQ==