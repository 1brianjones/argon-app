"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var HistoryViewModel = (function (_super) {
    __extends(HistoryViewModel, _super);
    function HistoryViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.historyList = bookmarks_1.historyList;
        return _this;
    }
    return HistoryViewModel;
}(observable_1.Observable));
exports.HistoryViewModel = HistoryViewModel;
exports.viewModel = new HistoryViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.historyList.indexOf(item);
    bookmarks_1.historyList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    // todo: fix for Android
    if (application.ios) {
        contentView.on(gestures_1.GestureTypes.pan, function (data) {
            if (data.state === gestures_1.GestureStateTypes.began) {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
            contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
            if (data.state === gestures_1.GestureStateTypes.ended) {
                editing = false;
                var open = contentView.translateX < swipeLimit * 0.75;
                toggleCellSwipeState(cell, open);
            }
            else {
                deleteView.visibility = 'visible';
            }
        });
    }
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIaXN0b3J5Vmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEyQztBQUMzQyw4Q0FBMkM7QUFHM0MsaURBQTZEO0FBQzdELHVEQUFtRDtBQUVuRCx3Q0FJcUI7QUFFckIsa0NBQXVDO0FBRXZDO0lBQXNDLG9DQUFVO0lBQWhEO1FBQUEscUVBRUM7UUFERyxpQkFBVyxHQUFHLHVCQUFXLENBQUM7O0lBQzlCLENBQUM7SUFBRCx1QkFBQztBQUFELENBQUMsQUFGRCxDQUFzQyx1QkFBVSxHQUUvQztBQUZZLDRDQUFnQjtBQUdoQixRQUFBLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFFaEQsSUFBSSxRQUFpQixDQUFDO0FBQ3RCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUVwQixrQkFBeUIsSUFBSTtJQUN6QixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixRQUFRLENBQUMsY0FBYyxHQUFHLGlCQUFTLENBQUM7QUFDeEMsQ0FBQztBQUhELDRCQUdDO0FBRUQsZUFBc0IsSUFBSTtJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFBQyxNQUFNLENBQUE7SUFDbkIsYUFBYSxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLEdBQWlCLElBQUksQ0FBQyxNQUFlLENBQUMsY0FBYyxDQUFDO0lBQzdELDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBTEQsc0JBS0M7QUFFRCxrQkFBeUIsSUFBSTtJQUN6QixhQUFhLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQUksR0FBaUIsSUFBSSxDQUFDLE1BQWUsQ0FBQyxjQUFjLENBQUM7SUFDN0QsSUFBSSxDQUFDLEdBQUcsdUJBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsdUJBQVcsQ0FBQyxNQUFN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U0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcGxpY2F0aW9uIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7Vmlld30gZnJvbSAndWkvY29yZS92aWV3JztcbmltcG9ydCB7TGlzdFZpZXd9IGZyb20gJ3VpL2xpc3Qtdmlldyc7XG5pbXBvcnQge0Jvb2ttYXJrSXRlbSwgaGlzdG9yeUxpc3R9IGZyb20gJy4uL2NvbW1vbi9ib29rbWFya3MnXG5pbXBvcnQge2FwcFZpZXdNb2RlbH0gZnJvbSAnLi4vY29tbW9uL0FwcFZpZXdNb2RlbCdcblxuaW1wb3J0IHtcbiAgR2VzdHVyZVR5cGVzLFxuICBHZXN0dXJlU3RhdGVUeXBlcyxcbiAgUGFuR2VzdHVyZUV2ZW50RGF0YSxcbn0gZnJvbSAndWkvZ2VzdHVyZXMnO1xuXG5pbXBvcnQge0FuaW1hdGlvbkN1cnZlfSBmcm9tICd1aS9lbnVtcydcblxuZXhwb3J0IGNsYXNzIEhpc3RvcnlWaWV3TW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgICBoaXN0b3J5TGlzdCA9IGhpc3RvcnlMaXN0O1xufVxuZXhwb3J0IGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBIaXN0b3J5Vmlld01vZGVsKCk7XG5cbmxldCBsaXN0VmlldzpMaXN0VmlldztcbmxldCBlZGl0aW5nID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgbGlzdFZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICBsaXN0Vmlldy5iaW5kaW5nQ29udGV4dCA9IHZpZXdNb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwKGFyZ3MpIHtcbiAgICBpZiAoZWRpdGluZykgcmV0dXJuXG4gICAgY2xvc2VBbGxDZWxscygpO1xuICAgIHZhciBpdGVtOkJvb2ttYXJrSXRlbSA9IChhcmdzLm9iamVjdCBhcyBWaWV3KS5iaW5kaW5nQ29udGV4dDtcbiAgICBhcHBWaWV3TW9kZWwubG9hZFVybChpdGVtLnVyaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRlbGV0ZShhcmdzKSB7XG4gICAgY2xvc2VBbGxDZWxscygpO1xuICAgIHZhciBpdGVtOkJvb2ttYXJrSXRlbSA9IChhcmdzLm9iamVjdCBhcyBWaWV3KS5iaW5kaW5nQ29udGV4dDtcbiAgICB2YXIgaSA9IGhpc3RvcnlMaXN0LmluZGV4T2YoaXRlbSk7XG4gICAgaGlzdG9yeUxpc3Quc3BsaWNlKGksIDEpO1xufVxuXG5jb25zdCBzd2lwZUxpbWl0ID0gLTY0O1xuXG5pbnRlcmZhY2UgQ2VsbFZpZXdzIHtcbiAgICBjb250ZW50VmlldzpWaWV3LCBcbiAgICBkZWxldGVWaWV3OlZpZXdcbn1cblxubGV0IG9wZW5DZWxsczpBcnJheTxDZWxsVmlld3M+ID0gW11cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbUxvYWRlZChhcmdzKSB7XG4gICAgdmFyIGl0ZW1WaWV3OlZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgY29udGVudFZpZXcgPSBpdGVtVmlldy5nZXRWaWV3QnlJZCgnY29udGVudCcpO1xuICAgIHZhciBkZWxldGVWaWV3ID0gaXRlbVZpZXcuZ2V0Vmlld0J5SWQoJ2RlbGV0ZScpO1xuICAgIHZhciBjZWxsID0ge2NvbnRlbnRWaWV3LCBkZWxldGVWaWV3fTtcbiAgICBcbiAgICB2YXIgcGFuU3RhcnQ9MDtcbiAgICAvLyB0b2RvOiBmaXggZm9yIEFuZHJvaWRcbiAgICBpZiAoYXBwbGljYXRpb24uaW9zKSB7XG4gICAgICAgIGNvbnRlbnRWaWV3Lm9uKEdlc3R1cmVUeXBlcy5wYW4sIChkYXRhOlBhbkdlc3R1cmVFdmVudERhdGEpPT57XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlID09PSBHZXN0dXJlU3RhdGVUeXBlcy5iZWdhbikge1xuICAgICAgICAgICAgICAgIHBhblN0YXJ0ID0gY29udGVudFZpZXcudHJhbnNsYXRlWDtcbiAgICAgICAgICAgICAgICBjbG9zZUFsbENlbGxzKGNlbGwpO1xuICAgICAgICAgICAgICAgIGVkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZW50Vmlldy50cmFuc2xhdGVYID0gTWF0aC5taW4oTWF0aC5tYXgocGFuU3RhcnQgKyBkYXRhLmRlbHRhWCwgLTEwMDApLCAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGEuc3RhdGUgPT09IEdlc3R1cmVTdGF0ZVR5cGVzLmVuZGVkKSB7XG4gICAgICAgICAgICAgICAgZWRpdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBvcGVuID0gY29udGVudFZpZXcudHJhbnNsYXRlWCA8IHN3aXBlTGltaXQqMC43NTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsLCBvcGVuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlVmlldy52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjbG9zZUFsbENlbGxzKGV4Y2VwdENlbGw/OkNlbGxWaWV3cykge1xuICAgIG9wZW5DZWxscy5mb3JFYWNoKChjZWxsKT0+e1xuICAgICAgICBpZiAoY2VsbCAhPT0gZXhjZXB0Q2VsbCkgdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbCwgZmFsc2UpO1xuICAgIH0pXG4gICAgb3BlbkNlbGxzID0gZXhjZXB0Q2VsbCA/IFtleGNlcHRDZWxsXSA6IFtdO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsOkNlbGxWaWV3cywgb3Blbjpib29sZWFuKSB7XG4gICAgY29uc3QgZmluYWxUcmFuc2xhdGVYID0gb3BlbiA/IHN3aXBlTGltaXQgOiAwXG4gICAgY2VsbC5jb250ZW50Vmlldy5hbmltYXRlKHtcbiAgICAgICAgdHJhbnNsYXRlOnt4OmZpbmFsVHJhbnNsYXRlWCwgeTowfSxcbiAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmVhc2VJbk91dFxuICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgY2VsbC5jb250ZW50Vmlldy50cmFuc2xhdGVYID0gZmluYWxUcmFuc2xhdGVYO1xuICAgICAgICBpZiAoIW9wZW4pIGNlbGwuZGVsZXRlVmlldy52aXNpYmlsaXR5ID0gJ2NvbGxhcHNlJztcbiAgICB9KTtcbiAgICBpZiAob3Blbikge1xuICAgICAgICBvcGVuQ2VsbHMucHVzaChjZWxsKTtcbiAgICB9XG59Il19