"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
var applicationSettings = require("application-settings");
var observable_array_1 = require("data/observable-array");
var observable_1 = require("data/observable");
var Argon = require("@argonjs/argon");
var BookmarkItem = (function (_super) {
    __extends(BookmarkItem, _super);
    function BookmarkItem(item) {
        var _this = _super.call(this, item) || this;
        _this.builtin = false;
        var uri = item.uri;
        // reuse an existing BookmarkItem if one exists
        if (historyMap.has(uri))
            return historyMap.get(uri);
        if (realityMap.has(uri))
            return realityMap.get(uri);
        if (favoriteMap.has(uri))
            return favoriteMap.get(uri);
        return _this;
    }
    BookmarkItem.prototype.toJSON = function () {
        return {
            title: this.title,
            uri: this.uri
        };
    };
    return BookmarkItem;
}(observable_1.Observable));
exports.BookmarkItem = BookmarkItem;
var favoriteList = new observable_array_1.ObservableArray();
exports.favoriteList = favoriteList;
var historyList = new observable_array_1.ObservableArray();
exports.historyList = historyList;
var realityList = new observable_array_1.ObservableArray();
exports.realityList = realityList;
var FilterControl = (function (_super) {
    __extends(FilterControl, _super);
    function FilterControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.showFilteredResults = false;
        return _this;
    }
    return FilterControl;
}(observable_1.Observable));
var filterControl = new FilterControl();
exports.filterControl = filterControl;
var filteredFavoriteList = new observable_array_1.ObservableArray();
exports.filteredFavoriteList = filteredFavoriteList;
var filteredHistoryList = new observable_array_1.ObservableArray();
exports.filteredHistoryList = filteredHistoryList;
var favoriteMap = new Map();
exports.favoriteMap = favoriteMap;
var historyMap = new Map();
exports.historyMap = historyMap;
var realityMap = new Map();
exports.realityMap = realityMap;
function updateMap(data, map) {
    var list = data.object;
    for (var i = 0; i < data.addedCount; i++) {
        var item = list.getItem(data.index + i);
        map.set(item.uri, item);
    }
    data.removed && data.removed.forEach(function (item) {
        map.delete(item.uri);
    });
}
favoriteList.on('change', function (data) { return updateMap(data, favoriteMap); });
historyList.on('change', function (data) { return updateMap(data, historyMap); });
realityList.on('change', function (data) { return updateMap(data, realityMap); });
var builtinFavorites = [
    new BookmarkItem({
        title: 'Argon Help',
        uri: 'http://app.argonjs.io/'
    }),
    new BookmarkItem({
        title: 'Argon Samples',
        uri: 'https://samples.argonjs.io/'
    }),
    new BookmarkItem({
        title: 'Argon-AFrame Samples',
        uri: 'https://aframe.argonjs.io/'
    }),
    new BookmarkItem({
        title: 'Credits',
        uri: 'http://www.argonjs.io/#support'
    })
];
builtinFavorites.forEach(function (item) {
    item.builtin = true;
    favoriteList.push(item);
});
var builtinRealities = [
    new BookmarkItem({ uri: Argon.RealityViewer.LIVE, title: 'Live' })
];
builtinRealities.forEach(function (item) {
    item.builtin = true;
    realityList.push(item);
});
var FAVORITE_LIST_KEY = 'favorite_list';
var HISTORY_LIST_KEY = 'history_list';
if (applicationSettings.hasKey(FAVORITE_LIST_KEY)) {
    console.log(applicationSettings.getString(FAVORITE_LIST_KEY));
    var savedFavorites = JSON.parse(applicationSettings.getString(FAVORITE_LIST_KEY));
    savedFavorites.forEach(function (item) {
        if (!favoriteMap.has(item.uri))
            favoriteList.push(new BookmarkItem(item));
    });
}
if (applicationSettings.hasKey(HISTORY_LIST_KEY)) {
    console.log(applicationSettings.getString(HISTORY_LIST_KEY));
    var savedHistory = JSON.parse(applicationSettings.getString(HISTORY_LIST_KEY));
    savedHistory.forEach(function (item) {
        historyList.push(new BookmarkItem(item));
    });
}
function saveFavorites() {
    var userFavorites = favoriteList.filter(function (item) { return !item.builtin; });
    applicationSettings.setString(FAVORITE_LIST_KEY, JSON.stringify(userFavorites));
}
function saveHistory() {
    var history = historyList.map(function (item) { return item; }); // convert to standard array
    applicationSettings.setString(HISTORY_LIST_KEY, JSON.stringify(history));
}
function saveBookmarks() {
    saveFavorites();
    saveHistory();
}
application.on(application.suspendEvent, saveBookmarks);
favoriteList.on('change', saveFavorites);
historyList.on('change', saveHistory);
function pushToHistory(url, title) {
    var historyBookmarkItem = historyMap.get(url);
    if (historyBookmarkItem) {
        var i = historyList.indexOf(historyBookmarkItem);
        historyList.splice(i, 1);
        historyList.unshift(historyBookmarkItem);
    }
    else {
        historyList.unshift(new BookmarkItem({
            uri: url,
            title: title
        }));
    }
}
exports.pushToHistory = pushToHistory;
function updateTitle(url, title) {
    var historyBookmarkItem = historyMap.get(url);
    if (historyBookmarkItem && !historyBookmarkItem.builtin) {
        historyBookmarkItem.set('title', title);
    }
}
exports.updateTitle = updateTitle;
function filterBookmarks(text) {
    var regex = new RegExp(text, "i");
    clearFilter();
    favoriteList.forEach(function (bookmark) {
        if (regex.test(bookmark.uri) || (bookmark.title && regex.test(bookmark.title))) {
            filteredFavoriteList.push(bookmark);
        }
    });
    historyList.forEach(function (bookmark) {
        if (regex.test(bookmark.uri) || (bookmark.title && regex.test(bookmark.title))) {
            filteredHistoryList.push(bookmark);
        }
    });
}
exports.filterBookmarks = filterBookmarks;
function clearFilter() {
    while (filteredFavoriteList.length > 0) {
        filteredFavoriteList.pop();
    }
    while (filteredHistoryList.length > 0) {
        filteredHistoryList.pop();
    }
}
exports.clearFilter = clearFilter;
//# sourceMappingURL=data:application/json;base64,