"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var color_1 = require("color");
var application = require("application");
var utils = require("utils/utils");
try {
    var ArgonPrivate = require('argon-private');
}
catch (e) { }
// Querying the screen orientation is expensive on Android
// Set this flag to true to cache the orientation
var cacheScreenOrientation = application.android ? true : false;
var screenOrientation;
function getScreenOrientation() {
    if (cacheScreenOrientation) {
        return screenOrientation;
    }
    else {
        return queryScreenOrientation();
    }
}
exports.getScreenOrientation = getScreenOrientation;
function updateScreenOrientation() {
    if (cacheScreenOrientation) {
        screenOrientation = queryScreenOrientation();
    }
}
exports.updateScreenOrientation = updateScreenOrientation;
function queryScreenOrientation() {
    if (application.ios) {
        var orientation = utils.ios.getter(UIApplication, UIApplication.sharedApplication).statusBarOrientation;
        switch (orientation) {
            case 0 /* Unknown */:
            case 1 /* Portrait */: return 0;
            case 2 /* PortraitUpsideDown */: return 180;
            case 4 /* LandscapeLeft */: return 90;
            case 3 /* LandscapeRight */: return -90;
        }
    }
    if (application.android) {
        var context = utils.ad.getApplicationContext();
        var display = context.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay();
        var rotation = display.getRotation();
        switch (rotation) {
            case android.view.Surface.ROTATION_0: return 0;
            case android.view.Surface.ROTATION_180: return 180;
            case android.view.Surface.ROTATION_90: return -90;
            case android.view.Surface.ROTATION_270: return 90;
        }
    }
    return 0;
}
exports.queryScreenOrientation = queryScreenOrientation;
function canDecrypt() {
    return !!ArgonPrivate;
}
exports.canDecrypt = canDecrypt;
function decrypt(encryptedData) {
    if (!ArgonPrivate)
        return Promise.reject(new Error("This build of Argon is incapable of decrypting messages."));
    return Promise.resolve().then(function () {
        return ArgonPrivate.decrypt(encryptedData);
    });
}
exports.decrypt = decrypt;
function getInternalVuforiaKey() {
    return ArgonPrivate && ArgonPrivate.getVuforiaLicenseKey();
}
exports.getInternalVuforiaKey = getInternalVuforiaKey;
function bringToFront(view) {
    if (view.android) {
        view.android.bringToFront();
    }
    else if (view.ios) {
        view.ios.superview.bringSubviewToFront(view.ios);
    }
}
exports.bringToFront = bringToFront;
function linearGradient(view, colors) {
    var _colors = [];
    var nativeView = view['_nativeView'];
    if (!nativeView) {
        return;
    }
    colors.forEach(function (c, idx) {
        if (!(c instanceof color_1.Color)) {
            colors[idx] = new color_1.Color(c);
        }
    });
    if (platform.device.os === platform.platformNames.android) {
        var backgroundDrawable = nativeView.getBackground(), LINEAR_GRADIENT = 0;
        colors.forEach(function (c) {
            _colors.push(c.android);
        });
        if (!(backgroundDrawable instanceof android.graphics.drawable.GradientDrawable)) {
            backgroundDrawable = new android.graphics.drawable.GradientDrawable();
            backgroundDrawable.setColors(_colors);
            backgroundDrawable.setGradientType(LINEAR_GRADIENT);
            nativeView.setBackgroundDrawable(backgroundDrawable);
        }
    }
    else if (platform.device.os === platform.platformNames.ios) {
        var iosView = view.ios;
        var colorsArray = NSMutableArray.alloc().initWithCapacity(2);
        colors.forEach(function (c) {
            colorsArray.addObject(interop.types.id(c.ios.CGColor));
        });
        var gradientLayer = CAGradientLayer.layer();
        gradientLayer.colors = colorsArray;
        gradientLayer.frame = iosView.bounds;
        iosView.layer.insertSublayerAtIndex(gradientLayer, 0);
    }
}
exports.linearGradient = linearGradient;
function ipToString(inAddr) {
    if (!inAddr) {
        throw new Error('in == NULL');
    }
    if (inAddr.s_addr === 0x00000000) {
        return '*';
    }
    else {
        return NSString.stringWithCStringEncoding(inet_ntoa(inAddr), 1).toString();
    }
}
function getIPAddressOfInterface($interface) {
    var address = '-';
    if (!$interface) {
        return address;
    }
    var interfacesPtrPtr = new interop.Reference();
    if (getifaddrs(interfacesPtrPtr) === 0) {
        var interfacesPtr = interfacesPtrPtr[0];
        var temp_addrPtr = interfacesPtr;
        while (temp_addrPtr != null) {
            if (temp_addrPtr[0].ifa_addr[0].sa_family === 2) {
                var name = NSString.stringWithUTF8String(temp_addrPtr[0].ifa_name).toString().trim();
                if (name == $interface) {
                    var ifa_addrPtr = temp_addrPtr[0].ifa_addr;
                    var ifa_addrPtrAsSockAddtr_in = new interop.Reference(sockaddr_in, ifa_addrPtr);
                    address = ipToString(ifa_addrPtrAsSockAddtr_in[0].sin_addr);
                }
            }
            temp_addrPtr = temp_addrPtr[0].ifa_next;
        }
        freeifaddrs(interfacesPtr);
    }
    return address;
}
exports.getIPAddressOfInterface = getIPAddressOfInterface;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FBcUM7QUFDckMsK0JBQTRCO0FBQzVCLHlDQUEyQztBQUMzQyxtQ0FBcUM7QUFFckMsSUFBSSxDQUFDO0lBQ0gsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztBQUVkLDBEQUEwRDtBQUMxRCxpREFBaUQ7QUFDakQsSUFBTSxzQkFBc0IsR0FBWSxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7QUFDM0UsSUFBSSxpQkFBeUIsQ0FBQztBQUU5QjtJQUNJLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsaUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDcEMsQ0FBQztBQUNMLENBQUM7QUFORCxvREFNQztBQUVEO0lBQ0ksRUFBRSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLGlCQUFpQixHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFDakQsQ0FBQztBQUNMLENBQUM7QUFKRCwwREFJQztBQUVEO0lBQ0ksRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1FBQzFHLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbEIsS0FBSyxlQUE4QixDQUFDO1lBQ3BDLEtBQUssZ0JBQStCLEVB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cG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gXCJwbGF0Zm9ybVwiO1xuaW1wb3J0IHtDb2xvcn0gZnJvbSBcImNvbG9yXCI7XG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwiYXBwbGljYXRpb25cIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJ3V0aWxzL3V0aWxzJztcblxudHJ5IHtcbiAgdmFyIEFyZ29uUHJpdmF0ZSA9IHJlcXVpcmUoJ2FyZ29uLXByaXZhdGUnKTtcbn0gY2F0Y2ggKGUpIHt9XG5cbi8vIFF1ZXJ5aW5nIHRoZSBzY3JlZW4gb3JpZW50YXRpb24gaXMgZXhwZW5zaXZlIG9uIEFuZHJvaWRcbi8vIFNldCB0aGlzIGZsYWcgdG8gdHJ1ZSB0byBjYWNoZSB0aGUgb3JpZW50YXRpb25cbmNvbnN0IGNhY2hlU2NyZWVuT3JpZW50YXRpb246IGJvb2xlYW4gPSBhcHBsaWNhdGlvbi5hbmRyb2lkID8gdHJ1ZSA6IGZhbHNlO1xudmFyIHNjcmVlbk9yaWVudGF0aW9uOiBudW1iZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5PcmllbnRhdGlvbigpIDogbnVtYmVyIHtcbiAgICBpZiAoY2FjaGVTY3JlZW5PcmllbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gc2NyZWVuT3JpZW50YXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5U2NyZWVuT3JpZW50YXRpb24oKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTY3JlZW5PcmllbnRhdGlvbigpIHtcbiAgICBpZiAoY2FjaGVTY3JlZW5PcmllbnRhdGlvbikge1xuICAgICAgICBzY3JlZW5PcmllbnRhdGlvbiA9IHF1ZXJ5U2NyZWVuT3JpZW50YXRpb24oKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVNjcmVlbk9yaWVudGF0aW9uKCkgOiBudW1iZXIge1xuICAgIGlmIChhcHBsaWNhdGlvbi5pb3MpIHtcbiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSB1dGlscy5pb3MuZ2V0dGVyKFVJQXBwbGljYXRpb24sIFVJQXBwbGljYXRpb24uc2hhcmVkQXBwbGljYXRpb24pLnN0YXR1c0Jhck9yaWVudGF0aW9uO1xuICAgICAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFVJSW50ZXJmYWNlT3JpZW50YXRpb24uVW5rbm93bjpcbiAgICAgICAgICAgIGNhc2UgVUlJbnRlcmZhY2VPcmllbnRhdGlvbi5Qb3J0cmFpdDogcmV0dXJuIDA7XG4gICAgICAgICAgICBjYXNlIFVJSW50ZXJmYWNlT3JpZW50YXRpb24uUG9ydHJhaXRVcHNpZGVEb3duOiByZXR1cm4gMTgwO1xuICAgICAgICAgICAgY2FzZSBVSUludGVyZmFjZU9yaWVudGF0aW9uLkxhbmRzY2FwZUxlZnQ6IHJldHVybiA5MDtcbiAgICAgICAgICAgIGNhc2UgVUlJbnRlcmZhY2VPcmllbnRhdGlvbi5MYW5kc2NhcGVSaWdodDogcmV0dXJuIC05MDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXBwbGljYXRpb24uYW5kcm9pZCkge1xuICAgICAgICBjb25zdCBjb250ZXh0OmFuZHJvaWQuY29udGVudC5Db250ZXh0ID0gdXRpbHMuYWQuZ2V0QXBwbGljYXRpb25Db250ZXh0KCk7XG4gICAgICAgIGNvbnN0IGRpc3BsYXk6YW5kcm9pZC52aWV3LkRpc3BsYXkgPSBjb250ZXh0LmdldFN5c3RlbVNlcnZpY2UoYW5kcm9pZC5jb250ZW50LkNvbnRleHQuV0lORE9XX1NFUlZJQ0UpLmdldERlZmF1bHREaXNwbGF5KCk7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gZGlzcGxheS5nZXRSb3RhdGlvbigpO1xuICAgICAgICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIGFuZHJvaWQudmlldy5TdXJmYWNlLlJPVEFUSU9OXzA6IHJldHVybiAwO1xuICAgICAgICAgICAgY2FzZSBhbmRyb2lkLnZpZXcuU3VyZmFjZS5ST1RBVElPTl8xODA6IHJldHVybiAxODA7XG4gICAgICAgICAgICBjYXNlIGFuZHJvaWQudmlldy5TdXJmYWNlLlJPVEFUSU9OXzkwOiByZXR1cm4gLTkwO1xuICAgICAgICAgICAgY2FzZSBhbmRyb2lkLnZpZXcuU3VyZmFjZS5ST1RBVElPTl8yNzA6IHJldHVybiA5MDtcbiAgICAgICAgfVxuICAgIH0gXG4gICAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5EZWNyeXB0KCkgOiBib29sZWFuIHsgXG4gIHJldHVybiAhIUFyZ29uUHJpdmF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY3J5cHQoZW5jcnlwdGVkRGF0YTpzdHJpbmcpIDogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKCFBcmdvblByaXZhdGUpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJUaGlzIGJ1aWxkIG9mIEFyZ29uIGlzIGluY2FwYWJsZSBvZiBkZWNyeXB0aW5nIG1lc3NhZ2VzLlwiKSlcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PntcbiAgICByZXR1cm4gQXJnb25Qcml2YXRlLmRlY3J5cHQoZW5jcnlwdGVkRGF0YSlcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlcm5hbFZ1Zm9yaWFLZXkoKSA6IHN0cmluZ3x1bmRlZmluZWQge1xuICByZXR1cm4gQXJnb25Qcml2YXRlICYmIEFyZ29uUHJpdmF0ZS5nZXRWdWZvcmlhTGljZW5zZUtleSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJpbmdUb0Zyb250KHZpZXc6IFZpZXcpIHtcbiAgaWYgKHZpZXcuYW5kcm9pZCkge1xuICAgIHZpZXcuYW5kcm9pZC5icmluZ1RvRnJvbnQoKTtcbiAgfSBlbHNlIGlmICh2aWV3Lmlvcykge1xuICAgIHZpZXcuaW9zLnN1cGVydmlldy5icmluZ1N1YnZpZXdUb0Zyb250KHZpZXcuaW9zKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyR3JhZGllbnQodmlldzpWaWV3LCBjb2xvcnM6KENvbG9yfHN0cmluZylbXSkge1xuICB2YXIgX2NvbG9yczphbnlbXSA9IFtdO1xuICB2YXIgbmF0aXZlVmlldyA9IHZpZXdbJ19uYXRpdmVWaWV3J107XG5cbiAgaWYgKCFuYXRpdmVWaWV3KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29sb3JzLmZvckVhY2goZnVuY3Rpb24gKGMsIGlkeCkge1xuICAgIGlmICghKGMgaW5zdGFuY2VvZiBDb2xvcikpIHtcbiAgICAgIGNvbG9yc1tpZHhdID0gbmV3IENvbG9yKGMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHBsYXRmb3JtLmRldmljZS5vcyA9PT0gcGxhdGZvcm0ucGxhdGZvcm1OYW1lcy5hbmRyb2lkKSB7XG4gICAgdmFyIGJhY2tncm91bmREcmF3YWJsZSA9IG5hdGl2ZVZpZXcuZ2V0QmFja2dyb3VuZCgpLFxuICAgICAgTElORUFSX0dSQURJRU5UID0gMDtcblxuICAgIGNvbG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChjOkNvbG9yKSB7XG4gICAgICBfY29sb3JzLnB1c2goYy5hbmRyb2lkKTtcbiAgICB9KTtcblxuICAgIGlmICghKGJhY2tncm91bmREcmF3YWJsZSBpbnN0YW5jZW9mIGFuZHJvaWQuZ3JhcGhpY3MuZHJhd2FibGUuR3JhZGllbnREcmF3YWJsZSkpIHtcbiAgICAgIGJhY2tncm91bmREcmF3YWJsZSA9IG5ldyBhbmRyb2lkLmdyYXBoaWNzLmRyYXdhYmxlLkdyYWRpZW50RHJhd2FibGUoKTtcbiAgICAgIGJhY2tncm91bmREcmF3YWJsZS5zZXRDb2xvcnMoX2NvbG9ycyk7XG4gICAgICBiYWNrZ3JvdW5kRHJhd2FibGUuc2V0R3JhZGllbnRUeXBlKExJTkVBUl9HUkFESUVOVCk7XG4gICAgICBuYXRpdmVWaWV3LnNldEJhY2tncm91bmREcmF3YWJsZShiYWNrZ3JvdW5kRHJhd2FibGUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwbGF0Zm9ybS5kZXZpY2Uub3MgPT09IHBsYXRmb3JtLnBsYXRmb3JtTmFtZXMuaW9zKSB7XG4gICAgdmFyIGlvc1ZpZXc6VUlWaWV3ID0gdmlldy5pb3M7XG4gICAgdmFyIGNvbG9yc0FycmF5ID0gTlNNdXRhYmxlQXJyYXkuYWxsb2MoKS5pbml0V2l0aENhcGFjaXR5KDIpO1xuICAgIGNvbG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChjOkNvbG9yKSB7XG4gICAgICBjb2xvcnNBcnJheS5hZGRPYmplY3QoaW50ZXJvcC50eXBlcy5pZChjLmlvcy5DR0NvbG9yKSk7XG4gICAgfSk7XG4gICAgdmFyIGdyYWRpZW50TGF5ZXIgPSBDQUdyYWRpZW50TGF5ZXIubGF5ZXIoKTtcbiAgICBncmFkaWVudExheWVyLmNvbG9ycyA9IGNvbG9yc0FycmF5O1xuICAgIGdyYWRpZW50TGF5ZXIuZnJhbWUgPSBpb3NWaWV3LmJvdW5kcztcbiAgICBpb3NWaWV3LmxheWVyLmluc2VydFN1YmxheWVyQXRJbmRleChncmFkaWVudExheWVyLCAwKTtcbiAgfVxufVxuXG5cbmRlY2xhcmUgY29uc3QgaW5ldF9udG9hOmFueTtcbmRlY2xhcmUgY29uc3QgZ2V0aWZhZGRyczphbnk7XG5kZWNsYXJlIGNvbnN0IHNvY2thZGRyX2luOmFueTtcbmRlY2xhcmUgY29uc3QgZnJlZWlmYWRkcnM6YW55O1xuXG5mdW5jdGlvbiBpcFRvU3RyaW5nKGluQWRkcikge1xuICAgIGlmICghaW5BZGRyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW4gPT0gTlVMTCcpO1xuICAgIH1cblxuICAgIGlmIChpbkFkZHIuc19hZGRyID09PSAweDAwMDAwMDAwKSB7XG4gICAgICAgIHJldHVybiAnKic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE5TU3RyaW5nLnN0cmluZ1dpdGhDU3RyaW5nRW5jb2RpbmcoaW5ldF9udG9hKGluQWRkciksIDEpLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVBBZGRyZXNzT2ZJbnRlcmZhY2UoJGludGVyZmFjZSkge1xuICAgIHZhciBhZGRyZXNzID0gJy0nO1xuICAgIGlmICghJGludGVyZmFjZSkge1xuICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICB9XG5cbiAgICB2YXIgaW50ZXJmYWNlc1B0clB0ciA9IG5ldyBpbnRlcm9wLlJlZmVyZW5jZSgpO1xuXG4gICAgaWYgKGdldGlmYWRkcnMoaW50ZXJmYWNlc1B0clB0cikgPT09IDApIHtcbiAgICAgICAgdmFyIGludGVyZmFjZXNQdHIgPSBpbnRlcmZhY2VzUHRyUHRyWzBdO1xuICAgICAgICB2YXIgdGVtcF9hZGRyUHRyID0gaW50ZXJmYWNlc1B0cjtcblxuICAgICAgICB3aGlsZSAodGVtcF9hZGRyUHRyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0ZW1wX2FkZHJQdHJbMF0uaWZhX2FkZHJbMF0uc2FfZmFtaWx5ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBOU1N0cmluZy5zdHJpbmdXaXRoVVRGOFN0cmluZyh0ZW1wX2FkZHJQdHJbMF0uaWZhX25hbWUpLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICRpbnRlcmZhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlmYV9hZGRyUHRyID0gdGVtcF9hZGRyUHRyWzBdLmlmYV9hZGRyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWZhX2FkZHJQdHJBc1NvY2tBZGR0cl9pbiA9IG5ldyBpbnRlcm9wLlJlZmVyZW5jZShzb2NrYWRkcl9pbiwgaWZhX2FkZHJQdHIpO1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzID0gaXBUb1N0cmluZyhpZmFfYWRkclB0ckFzU29ja0FkZHRyX2luWzBdLnNpbl9hZGRyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wX2FkZHJQdHIgPSB0ZW1wX2FkZHJQdHJbMF0uaWZhX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBmcmVlaWZhZGRycyhpbnRlcmZhY2VzUHRyKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZHJlc3M7XG59XG5cbiJdfQ==