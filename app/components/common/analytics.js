"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var googleAnalytics = require("nativescript-google-analytics");
var application = require("application");
var AppViewModel_1 = require("./AppViewModel");
var isFirstLoad = true;
var pageLoadTimerId = -1;
var maxActiveApps = 0;
var maxInstalledRealities = 0;
var currentRealityUri = "";
var focusTimerActive = false;
var appFocusTimerID = "App Focus";
function initAnalytics() {
    googleAnalytics.initalize({
        trackingId: "UA-98725997-1",
        dispatchInterval: 10,
        logging: {
            native: true,
            console: true
        }
    });
}
exports.initAnalytics = initAnalytics;
function updateArgonAppCount(count) {
    if (count > maxActiveApps) {
        maxActiveApps = count;
        if (count > 1) {
            logActiveAppCount(count);
        }
    }
}
exports.updateArgonAppCount = updateArgonAppCount;
function updateInstalledRealityCount(count) {
    if (count > maxInstalledRealities) {
        maxInstalledRealities = count;
        if (count > 1) {
            logInstalledRealityCount(count);
        }
    }
}
exports.updateInstalledRealityCount = updateInstalledRealityCount;
function updateCurrentRealityUri(uri) {
    currentRealityUri = uri;
}
exports.updateCurrentRealityUri = updateCurrentRealityUri;
function realityManuallyChanged(uri) {
    if (uri != currentRealityUri) {
        logRealityManuallyChanged();
    }
}
exports.realityManuallyChanged = realityManuallyChanged;
AppViewModel_1.appViewModel.ready.then(function () {
    if (isFirstLoad) {
        logAppStart();
        AppViewModel_1.appViewModel.argon.provider.focus.sessionFocusEvent.addEventListener(function (_a) {
            var current = _a.current;
            if (current && current.uri != "argon:manager") {
                logAppFocus(current.uri);
                current.closeEvent.addEventListener(function () { clearAppFocus(); });
            }
            else {
                clearAppFocus();
            }
        });
    }
});
AppViewModel_1.appViewModel.on('propertyChange', function (evt) {
    if (evt.propertyName === 'currentUri') {
        // User needs to stay on a page for a few seconds for it to count as a page load
        // This way redirects and accidental clicks aren't logged
        clearTimeout(pageLoadTimerId);
        if (AppViewModel_1.appViewModel.currentUri) {
            pageLoadTimerId = setTimeout(function () {
                logPageLoad(AppViewModel_1.appViewModel.currentUri);
            }, 3000);
        }
    }
});
application.on(application.resumeEvent, function () {
    if (!isFirstLoad) {
        logAppResume();
    }
});
application.on(application.suspendEvent, function () {
    isFirstLoad = false;
    clearAppFocus();
});
function logAppStart() {
    googleAnalytics.logEvent({
        category: "App Start",
        action: AppViewModel_1.appViewModel.launchedFromUrl ? "URL Launch" : "User Launch",
        label: application.ios ? "iOS" : "Android",
        value: 1
    });
}
function logAppResume() {
    googleAnalytics.logEvent({
        category: "App Resume",
        action: AppViewModel_1.appViewModel.launchedFromUrl ? "URL Launch" : "User Launch",
        label: application.ios ? "iOS" : "Android",
        value: 1
    });
}
function logPageLoad(url) {
    var type = "Page Loaded (other)";
    if (url.includes("argonjs.io")) {
        type = "Page Loaded (argonjs.io)";
    }
    else if (url.includes("google.com/search")) {
        type = "Google Search";
    }
    googleAnalytics.logEvent({
        category: "Page Load",
        action: type,
        label: application.ios ? "iOS" : "Android",
        value: 1
    });
}
function logAppFocus(url) {
    var type = "App Focus (other)";
    if (url.includes("argonjs.io")) {
        type = "App Focus (argonjs.io)";
    }
    if (focusTimerActive)
        googleAnalytics.stopTimer(appFocusTimerID);
    googleAnalytics.startTimer(appFocusTimerID, {
        category: "App Focus",
        name: type,
        label: (application.ios) ? "iOS" : "Android"
    });
    focusTimerActive = true;
}
function clearAppFocus() {
    if (focusTimerActive)
        googleAnalytics.stopTimer(appFocusTimerID);
    focusTimerActive = false;
}
function logActiveAppCount(count) {
    googleAnalytics.logEvent({
        category: "Multiple Apps",
        action: (count + " Apps Open"),
        label: application.ios ? "iOS" : "Android",
        value: count
    });
}
function logInstalledRealityCount(count) {
    googleAnalytics.logEvent({
        category: "Multiple Realities",
        action: (count + " Realities Installed"),
        label: application.ios ? "iOS" : "Android",
        value: count
    });
}
function logRealityManuallyChanged() {
    googleAnalytics.logEvent({
        category: "Reality Change",
        action: "Manual Reality Change",
        label: application.ios ? "iOS" : "Android",
        value: 1
    });
}
//# sourceMappingURL=data:application/json;base64,