"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppViewModel_1 = require("../common/AppViewModel");
var color_1 = require("color");
var enums = require("ui/enums");
var label;
var shadow;
function onLayoutLoaded(args) {
    var layout = args.object;
    layout.backgroundColor = new color_1.Color('transparent');
    AppViewModel_1.appViewModel.on('propertyChange', function (args) {
        if (args.propertyName === 'debugEnabled' || args.propertyName === 'layerDetails') {
            updateLogListener(AppViewModel_1.appViewModel.layerDetails.log);
        }
    });
}
exports.onLayoutLoaded = onLayoutLoaded;
function onLoaded(args) {
    label = args.object;
    label.verticalAlignment = enums.VerticalAlignment.bottom;
}
exports.onLoaded = onLoaded;
function onShadowLoaded(args) {
    shadow = args.object;
    shadow.verticalAlignment = enums.VerticalAlignment.bottom;
    shadow.translateX = 0.5;
    shadow.translateY = 0.5;
}
exports.onShadowLoaded = onShadowLoaded;
var currentLog;
function updateLogListener(log) {
    if (log === currentLog && AppViewModel_1.appViewModel.debugEnabled)
        return;
    if (currentLog) {
        currentLog.removeEventListener("change", updateLog);
        currentLog = undefined;
    }
    if (!log || !AppViewModel_1.appViewModel.debugEnabled)
        return;
    log.addEventListener('change', updateLog);
    currentLog = log;
    updateLog();
}
function updateLog() {
    if (currentLog && currentLog.length > 0) {
        var lines = [];
        loop: for (var l = currentLog.length - 1; l >= 0; l--) {
            var log = currentLog.getItem(l);
            lines.unshift.apply(lines, log.lines);
            if (lines.length > 50)
                break loop;
        }
        label.text = lines.join('\n');
        shadow.text = label.text;
    }
    else {
        label.text = "";
        shadow.text = "";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1REFBb0Q7QUFFcEQsK0JBQTRCO0FBQzVCLGdDQUFrQztBQUdsQyxJQUFJLEtBQVcsQ0FBQztBQUNoQixJQUFJLE1BQVksQ0FBQztBQUVqQix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLE1BQU0sR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxhQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEQsMkJBQVksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsVUFBQyxJQUF1QjtRQUN0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLGNBQWMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsaUJBQWlCLENBQUMsMkJBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQVRELHdDQVNDO0FBRUQsa0JBQXlCLElBQUk7SUFDekIsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDN0QsQ0FBQztBQUhELDRCQUdDO0FBRUQsd0JBQStCLElBQUk7SUFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7SUFDMUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDeEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFDNUIsQ0FBQztBQUxELHdDQUtDO0FBRUQsSUFBSSxVQUE2QyxDQUFDO0FBRWxELDJCQUEyQixHQUE0QjtJQUNuRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssVUFBVSxJQUFJLDJCQUFZLENBQUMsWUFBWSxDQUFDO1FBQUMsTUFBTSxDQUFDO0lBQzVELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDYixVQUFVLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsMkJBQVksQ0FBQyxZQUFZLENBQUM7UUFBQyxNQUFNLENBQUM7SUFDL0MsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLFNBQVMsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFFRDtJQUNJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQVksRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEQsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxLQUFLLENBQUMsT0FBTyxPQUFiLEtBQUssRUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQzVCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2dCQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdEMsQ0FBQztRQUNELEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb3BlcnR5Q2hhbmdlRGF0YX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7T2JzZXJ2YWJsZUFycmF5fSBmcm9tICdkYXRhL29ic2VydmFibGUtYXJyYXknO1xuaW1wb3J0IHtMYWJlbH0gZnJvbSAndWkvbGFiZWwnO1xuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnO1xuaW1wb3J0IHtMb2dJdGVtfSBmcm9tICdhcmdvbi13ZWItdmlldyc7XG5pbXBvcnQge0NvbG9yfSBmcm9tICdjb2xvcic7XG5pbXBvcnQgKiBhcyBlbnVtcyBmcm9tICd1aS9lbnVtcyc7XG5pbXBvcnQge0xheW91dH0gZnJvbSAndWkvbGF5b3V0cy9sYXlvdXQnXG5cbmxldCBsYWJlbDpMYWJlbDtcbmxldCBzaGFkb3c6TGFiZWw7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxheW91dExvYWRlZChhcmdzKSB7XG4gICAgY29uc3QgbGF5b3V0OkxheW91dCA9IGFyZ3Mub2JqZWN0O1xuICAgIGxheW91dC5iYWNrZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoJ3RyYW5zcGFyZW50Jyk7XG4gICAgXG4gICAgYXBwVmlld01vZGVsLm9uKCdwcm9wZXJ0eUNoYW5nZScsIChhcmdzOlByb3BlcnR5Q2hhbmdlRGF0YSk9PntcbiAgICAgICAgaWYgKGFyZ3MucHJvcGVydHlOYW1lID09PSAnZGVidWdFbmFibGVkJyB8fCBhcmdzLnByb3BlcnR5TmFtZSA9PT0gJ2xheWVyRGV0YWlscycpIHtcbiAgICAgICAgICAgIHVwZGF0ZUxvZ0xpc3RlbmVyKGFwcFZpZXdNb2RlbC5sYXllckRldGFpbHMubG9nKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgbGFiZWwgPSBhcmdzLm9iamVjdDtcbiAgICBsYWJlbC52ZXJ0aWNhbEFsaWdubWVudCA9IGVudW1zLlZlcnRpY2FsQWxpZ25tZW50LmJvdHRvbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hhZG93TG9hZGVkKGFyZ3MpIHtcbiAgICBzaGFkb3cgPSBhcmdzLm9iamVjdDtcbiAgICBzaGFkb3cudmVydGljYWxBbGlnbm1lbnQgPSBlbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5ib3R0b207XG4gICAgc2hhZG93LnRyYW5zbGF0ZVggPSAwLjU7XG4gICAgc2hhZG93LnRyYW5zbGF0ZVkgPSAwLjU7XG59XG5cbmxldCBjdXJyZW50TG9nOk9ic2VydmFibGVBcnJheTxMb2dJdGVtPnx1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvZ0xpc3RlbmVyKGxvZzpPYnNlcnZhYmxlQXJyYXk8TG9nSXRlbT4pIHtcbiAgICBpZiAobG9nID09PSBjdXJyZW50TG9nICYmIGFwcFZpZXdNb2RlbC5kZWJ1Z0VuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoY3VycmVudExvZykge1xuICAgICAgICBjdXJyZW50TG9nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdXBkYXRlTG9nKTtcbiAgICAgICAgY3VycmVudExvZyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFsb2cgfHwgIWFwcFZpZXdNb2RlbC5kZWJ1Z0VuYWJsZWQpIHJldHVybjtcbiAgICBsb2cuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlTG9nKTtcbiAgICBjdXJyZW50TG9nID0gbG9nO1xuICAgIHVwZGF0ZUxvZygpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVMb2coKSB7XG4gICAgaWYgKGN1cnJlbnRMb2cgJiYgY3VycmVudExvZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBsaW5lczpzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsb29wOiBmb3IgKHZhciBsID0gY3VycmVudExvZy5sZW5ndGgtMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgICAgICAgIHZhciBsb2cgPSBjdXJyZW50TG9nLmdldEl0ZW0obCk7XG4gICAgICAgICAgICBsaW5lcy51bnNoaWZ0KC4uLmxvZy5saW5lcyk7XG4gICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gNTApIGJyZWFrIGxvb3A7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwudGV4dCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgICBzaGFkb3cudGV4dCA9IGxhYmVsLnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWwudGV4dCA9IFwiXCI7XG4gICAgICAgIHNoYWRvdy50ZXh0ID0gXCJcIjtcbiAgICB9XG59XG5cbiJdfQ==