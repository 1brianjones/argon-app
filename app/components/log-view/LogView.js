"use strict";
var AppViewModel_1 = require("../common/AppViewModel");
var color_1 = require("color");
var enums = require("ui/enums");
var label;
var shadow;
function onLayoutLoaded(args) {
    args.object.backgroundColor = new color_1.Color('transparent');
}
exports.onLayoutLoaded = onLayoutLoaded;
function onLoaded(args) {
    label = args.object;
    label.bindingContext = AppViewModel_1.appViewModel;
    label.verticalAlignment = enums.VerticalAlignment.bottom;
    AppViewModel_1.appViewModel['getRecentLogs'] = function () {
        var webView = AppViewModel_1.appViewModel.layerDetails.webView;
        updateLogListener(webView);
        return label.text;
    };
    AppViewModel_1.appViewModel.on('propertyChange', function (args) {
        if (args.propertyName === 'debugEnabled') {
            updateLogListener(AppViewModel_1.appViewModel.layerDetails.webView);
        }
    });
}
exports.onLoaded = onLoaded;
function onShadowLoaded(args) {
    shadow = args.object;
    shadow.verticalAlignment = enums.VerticalAlignment.bottom;
    shadow.translateX = 0.5;
    shadow.translateY = 0.5;
}
exports.onShadowLoaded = onShadowLoaded;
var previousWebView;
function updateLogListener(webView) {
    if (webView === previousWebView && AppViewModel_1.appViewModel.debugEnabled)
        return;
    if (previousWebView) {
        previousWebView.logs.removeEventListener("change", updateLog);
        previousWebView = undefined;
    }
    if (!webView || !AppViewModel_1.appViewModel.debugEnabled)
        return;
    webView.logs.addEventListener('change', updateLog);
    previousWebView = webView;
    updateLog();
}
function updateLog() {
    var webView = AppViewModel_1.appViewModel.layerDetails.webView;
    if (webView && webView.logs.length > 0) {
        var lines = [];
        loop: for (var l = webView.logs.length - 1; l >= 0; l--) {
            var log = webView.logs.getItem(l);
            lines.unshift.apply(lines, log.lines);
            if (lines.length > 50)
                break loop;
        }
        label.text = lines.join('\n');
        shadow.text = label.text;
    }
    else {
        label.text = "";
        shadow.text = "";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLHVEQUFvRDtBQUVwRCwrQkFBNEI7QUFFNUIsZ0NBQWtDO0FBRWxDLElBQUksS0FBVyxDQUFDO0FBQ2hCLElBQUksTUFBWSxDQUFDO0FBRWpCLHdCQUErQixJQUFJO0lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksYUFBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFGRCx3Q0FFQztBQUVELGtCQUF5QixJQUFJO0lBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxjQUFjLEdBQUcsMkJBQVksQ0FBQztJQUNwQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztJQUV6RCwyQkFBWSxDQUFDLGVBQWUsQ0FBQyxHQUFHO1FBQzVCLElBQU0sT0FBTyxHQUFHLDJCQUFZLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQTtRQUNqRCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN0QixDQUFDLENBQUM7SUFFRiwyQkFBWSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFDLElBQXVCO1FBQ3RELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2QyxpQkFBaUIsQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBaEJELDRCQWdCQztBQUVELHdCQUErQixJQUFJO0lBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0lBQzFELE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQzVCLENBQUM7QUFMRCx3Q0FLQztBQUVELElBQUksZUFBc0MsQ0FBQztBQUUzQywyQkFBMkIsT0FBeUI7SUFDaEQsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLGVBQWUsSUFBSSwyQkFBWSxDQUFDLFlBQVksQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUNyRSxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLGVBQWUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzlELGVBQWUsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsMkJBQVksQ0FBQyxZQUFZLENBQUM7UUFBQyxNQUFNLENBQUM7SUFDbkQsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbkQsZUFBZSxHQUFHLE9BQU8sQ0FBQztJQUMxQixTQUFTLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBRUQ7SUFDSSxJQUFNLE9BQU8sR0FBRywyQkFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDbEQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxLQUFLLEdBQVksRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3BELElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLEtBQUssQ0FBQyxPQUFPLE9BQWIsS0FBSyxFQUFZLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDNUIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN0QyxDQUFDO1FBQ0QsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUM3QixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZSwgUHJvcGVydHlDaGFuZ2VEYXRhfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlQXJyYXksIENoYW5nZWREYXRhfSBmcm9tICdkYXRhL29ic2VydmFibGUtYXJyYXknO1xuaW1wb3J0IHtWaWV3fSBmcm9tICd1aS9jb3JlL3ZpZXcnO1xuaW1wb3J0IHtMYWJlbH0gZnJvbSAndWkvbGFiZWwnO1xuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnO1xuaW1wb3J0IHtBcmdvbldlYlZpZXcsIExvZ30gZnJvbSAnYXJnb24td2ViLXZpZXcnO1xuaW1wb3J0IHtDb2xvcn0gZnJvbSAnY29sb3InO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAndXRpbHMvdXRpbHMnO1xuaW1wb3J0ICogYXMgZW51bXMgZnJvbSAndWkvZW51bXMnO1xuXG5sZXQgbGFiZWw6TGFiZWw7XG5sZXQgc2hhZG93OkxhYmVsO1xuXG5leHBvcnQgZnVuY3Rpb24gb25MYXlvdXRMb2FkZWQoYXJncykge1xuICAgIGFyZ3Mub2JqZWN0LmJhY2tncm91bmRDb2xvciA9IG5ldyBDb2xvcigndHJhbnNwYXJlbnQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZGVkKGFyZ3MpIHtcbiAgICBsYWJlbCA9IGFyZ3Mub2JqZWN0O1xuICAgIGxhYmVsLmJpbmRpbmdDb250ZXh0ID0gYXBwVmlld01vZGVsO1xuICAgIGxhYmVsLnZlcnRpY2FsQWxpZ25tZW50ID0gZW51bXMuVmVydGljYWxBbGlnbm1lbnQuYm90dG9tO1xuXG4gICAgYXBwVmlld01vZGVsWydnZXRSZWNlbnRMb2dzJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3Qgd2ViVmlldyA9IGFwcFZpZXdNb2RlbC5sYXllckRldGFpbHMud2ViVmlld1xuICAgICAgICB1cGRhdGVMb2dMaXN0ZW5lcih3ZWJWaWV3KTtcbiAgICAgICAgcmV0dXJuIGxhYmVsLnRleHQ7XG4gICAgfTtcbiAgICBcbiAgICBhcHBWaWV3TW9kZWwub24oJ3Byb3BlcnR5Q2hhbmdlJywgKGFyZ3M6UHJvcGVydHlDaGFuZ2VEYXRhKT0+e1xuICAgICAgICBpZiAoYXJncy5wcm9wZXJ0eU5hbWUgPT09ICdkZWJ1Z0VuYWJsZWQnKSB7XG4gICAgICAgICAgICB1cGRhdGVMb2dMaXN0ZW5lcihhcHBWaWV3TW9kZWwubGF5ZXJEZXRhaWxzLndlYlZpZXcpO1xuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hhZG93TG9hZGVkKGFyZ3MpIHtcbiAgICBzaGFkb3cgPSBhcmdzLm9iamVjdDtcbiAgICBzaGFkb3cudmVydGljYWxBbGlnbm1lbnQgPSBlbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5ib3R0b207XG4gICAgc2hhZG93LnRyYW5zbGF0ZVggPSAwLjU7XG4gICAgc2hhZG93LnRyYW5zbGF0ZVkgPSAwLjU7XG59XG5cbmxldCBwcmV2aW91c1dlYlZpZXc6QXJnb25XZWJWaWV3fHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gdXBkYXRlTG9nTGlzdGVuZXIod2ViVmlldzpBcmdvbldlYlZpZXd8bnVsbCkge1xuICAgIGlmICh3ZWJWaWV3ID09PSBwcmV2aW91c1dlYlZpZXcgJiYgYXBwVmlld01vZGVsLmRlYnVnRW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChwcmV2aW91c1dlYlZpZXcpIHtcbiAgICAgICAgcHJldmlvdXNXZWJWaWV3LmxvZ3MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVMb2cpO1xuICAgICAgICBwcmV2aW91c1dlYlZpZXcgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghd2ViVmlldyB8fCAhYXBwVmlld01vZGVsLmRlYnVnRW5hYmxlZCkgcmV0dXJuO1xuICAgIHdlYlZpZXcubG9ncy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVMb2cpO1xuICAgIHByZXZpb3VzV2ViVmlldyA9IHdlYlZpZXc7XG4gICAgdXBkYXRlTG9nKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvZygpIHtcbiAgICBjb25zdCB3ZWJWaWV3ID0gYXBwVmlld01vZGVsLmxheWVyRGV0YWlscy53ZWJWaWV3O1xuICAgIGlmICh3ZWJWaWV3ICYmIHdlYlZpZXcubG9ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBsaW5lczpzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsb29wOiBmb3IgKHZhciBsID0gd2ViVmlldy5sb2dzLmxlbmd0aC0xOyBsID49IDA7IGwtLSkge1xuICAgICAgICAgICAgdmFyIGxvZyA9IHdlYlZpZXcubG9ncy5nZXRJdGVtKGwpO1xuICAgICAgICAgICAgbGluZXMudW5zaGlmdCguLi5sb2cubGluZXMpO1xuICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDUwKSBicmVhayBsb29wO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsLnRleHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgICAgc2hhZG93LnRleHQgPSBsYWJlbC50ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxhYmVsLnRleHQgPSBcIlwiO1xuICAgICAgICBzaGFkb3cudGV4dCA9IFwiXCI7XG4gICAgfVxufVxuXG4iXX0=