"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppViewModel_1 = require("../common/AppViewModel");
var color_1 = require("color");
var enums = require("ui/enums");
var label;
var shadow;
function onLayoutLoaded(args) {
    var layout = args.object;
    layout.backgroundColor = new color_1.Color('transparent');
    // appViewModel['getRecentLogItems'] = function() {
    //     updateLogListener(appViewModel.layerDetails.log);
    //     return label.text;
    // };
    AppViewModel_1.appViewModel.on('propertyChange', function (args) {
        if (args.propertyName === 'debugEnabled' || args.propertyName === 'layerDetails') {
            updateLogListener(AppViewModel_1.appViewModel.layerDetails.log);
        }
    });
    // layout.bindingContext = appViewModel;
}
exports.onLayoutLoaded = onLayoutLoaded;
function onLoaded(args) {
    label = args.object;
    label.verticalAlignment = enums.VerticalAlignment.bottom;
}
exports.onLoaded = onLoaded;
function onShadowLoaded(args) {
    shadow = args.object;
    shadow.verticalAlignment = enums.VerticalAlignment.bottom;
    shadow.translateX = 0.5;
    shadow.translateY = 0.5;
}
exports.onShadowLoaded = onShadowLoaded;
var currentLog;
function updateLogListener(log) {
    if (log === currentLog && AppViewModel_1.appViewModel.debugEnabled)
        return;
    if (currentLog) {
        currentLog.removeEventListener("change", updateLog);
        currentLog = undefined;
    }
    if (!log || !AppViewModel_1.appViewModel.debugEnabled)
        return;
    log.addEventListener('change', updateLog);
    currentLog = log;
    updateLog();
}
function updateLog() {
    if (currentLog && currentLog.length > 0) {
        var lines = [];
        loop: for (var l = currentLog.length - 1; l >= 0; l--) {
            var log = currentLog.getItem(l);
            lines.unshift.apply(lines, log.lines);
            if (lines.length > 50)
                break loop;
        }
        label.text = lines.join('\n');
        shadow.text = label.text;
    }
    else {
        label.text = "";
        shadow.text = "";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1REFBb0Q7QUFFcEQsK0JBQTRCO0FBQzVCLGdDQUFrQztBQUdsQyxJQUFJLEtBQVcsQ0FBQztBQUNoQixJQUFJLE1BQVksQ0FBQztBQUVqQix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLE1BQU0sR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxhQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEQsbURBQW1EO0lBQ25ELHdEQUF3RDtJQUN4RCx5QkFBeUI7SUFDekIsS0FBSztJQUVMLDJCQUFZLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLFVBQUMsSUFBdUI7UUFDdEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxjQUFjLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQy9FLGlCQUFpQixDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLHdDQUF3QztBQUM1QyxDQUFDO0FBaEJELHdDQWdCQztBQUVELGtCQUF5QixJQUFJO0lBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQzdELENBQUM7QUFIRCw0QkFHQztBQUVELHdCQUErQixJQUFJO0lBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0lBQzFELE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQzVCLENBQUM7QUFMRCx3Q0FLQztBQUVELElBQUksVUFBNkMsQ0FBQztBQUVsRCwyQkFBMkIsR0FBNEI7SUFDbkQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFVBQVUsSUFBSSwyQkFBWSxDQUFDLFlBQVksQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUM1RCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2IsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDO1FBQUMsTUFBTSxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUNqQixTQUFTLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBRUQ7SUFDSSxFQUFFLENBQUMsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksS0FBSyxHQUFZLEVBQUUsQ0FBQztRQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xELElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLE9BQU8sT0FBYixLQUFLLEVBQVksR0FBRyxDQUFDLEtBQUssRUFBRTtZQUM1QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3RDLENBQUM7UUFDRCxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQcm9wZXJ0eUNoYW5nZURhdGF9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQge09ic2VydmFibGVBcnJheX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlLWFycmF5JztcbmltcG9ydCB7TGFiZWx9IGZyb20gJ3VpL2xhYmVsJztcbmltcG9ydCB7YXBwVmlld01vZGVsfSBmcm9tICcuLi9jb21tb24vQXBwVmlld01vZGVsJztcbmltcG9ydCB7TG9nSXRlbX0gZnJvbSAnYXJnb24td2ViLXZpZXcnO1xuaW1wb3J0IHtDb2xvcn0gZnJvbSAnY29sb3InO1xuaW1wb3J0ICogYXMgZW51bXMgZnJvbSAndWkvZW51bXMnO1xuaW1wb3J0IHtMYXlvdXR9IGZyb20gJ3VpL2xheW91dHMvbGF5b3V0J1xuXG5sZXQgbGFiZWw6TGFiZWw7XG5sZXQgc2hhZG93OkxhYmVsO1xuXG5leHBvcnQgZnVuY3Rpb24gb25MYXlvdXRMb2FkZWQoYXJncykge1xuICAgIGNvbnN0IGxheW91dDpMYXlvdXQgPSBhcmdzLm9iamVjdDtcbiAgICBsYXlvdXQuYmFja2dyb3VuZENvbG9yID0gbmV3IENvbG9yKCd0cmFuc3BhcmVudCcpO1xuXG4gICAgLy8gYXBwVmlld01vZGVsWydnZXRSZWNlbnRMb2dJdGVtcyddID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgIHVwZGF0ZUxvZ0xpc3RlbmVyKGFwcFZpZXdNb2RlbC5sYXllckRldGFpbHMubG9nKTtcbiAgICAvLyAgICAgcmV0dXJuIGxhYmVsLnRleHQ7XG4gICAgLy8gfTtcbiAgICBcbiAgICBhcHBWaWV3TW9kZWwub24oJ3Byb3BlcnR5Q2hhbmdlJywgKGFyZ3M6UHJvcGVydHlDaGFuZ2VEYXRhKT0+e1xuICAgICAgICBpZiAoYXJncy5wcm9wZXJ0eU5hbWUgPT09ICdkZWJ1Z0VuYWJsZWQnIHx8IGFyZ3MucHJvcGVydHlOYW1lID09PSAnbGF5ZXJEZXRhaWxzJykge1xuICAgICAgICAgICAgdXBkYXRlTG9nTGlzdGVuZXIoYXBwVmlld01vZGVsLmxheWVyRGV0YWlscy5sb2cpO1xuICAgICAgICB9XG4gICAgfSlcblxuICAgIC8vIGxheW91dC5iaW5kaW5nQ29udGV4dCA9IGFwcFZpZXdNb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZGVkKGFyZ3MpIHtcbiAgICBsYWJlbCA9IGFyZ3Mub2JqZWN0O1xuICAgIGxhYmVsLnZlcnRpY2FsQWxpZ25tZW50ID0gZW51bXMuVmVydGljYWxBbGlnbm1lbnQuYm90dG9tO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25TaGFkb3dMb2FkZWQoYXJncykge1xuICAgIHNoYWRvdyA9IGFyZ3Mub2JqZWN0O1xuICAgIHNoYWRvdy52ZXJ0aWNhbEFsaWdubWVudCA9IGVudW1zLlZlcnRpY2FsQWxpZ25tZW50LmJvdHRvbTtcbiAgICBzaGFkb3cudHJhbnNsYXRlWCA9IDAuNTtcbiAgICBzaGFkb3cudHJhbnNsYXRlWSA9IDAuNTtcbn1cblxubGV0IGN1cnJlbnRMb2c6T2JzZXJ2YWJsZUFycmF5PExvZ0l0ZW0+fHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gdXBkYXRlTG9nTGlzdGVuZXIobG9nOk9ic2VydmFibGVBcnJheTxMb2dJdGVtPikge1xuICAgIGlmIChsb2cgPT09IGN1cnJlbnRMb2cgJiYgYXBwVmlld01vZGVsLmRlYnVnRW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChjdXJyZW50TG9nKSB7XG4gICAgICAgIGN1cnJlbnRMb2cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVMb2cpO1xuICAgICAgICBjdXJyZW50TG9nID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWxvZyB8fCAhYXBwVmlld01vZGVsLmRlYnVnRW5hYmxlZCkgcmV0dXJuO1xuICAgIGxvZy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVMb2cpO1xuICAgIGN1cnJlbnRMb2cgPSBsb2c7XG4gICAgdXBkYXRlTG9nKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvZygpIHtcbiAgICBpZiAoY3VycmVudExvZyAmJiBjdXJyZW50TG9nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGxpbmVzOnN0cmluZ1tdID0gW107XG4gICAgICAgIGxvb3A6IGZvciAodmFyIGwgPSBjdXJyZW50TG9nLmxlbmd0aC0xOyBsID49IDA7IGwtLSkge1xuICAgICAgICAgICAgdmFyIGxvZyA9IGN1cnJlbnRMb2cuZ2V0SXRlbShsKTtcbiAgICAgICAgICAgIGxpbmVzLnVuc2hpZnQoLi4ubG9nLmxpbmVzKTtcbiAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiA1MCkgYnJlYWsgbG9vcDtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbC50ZXh0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICAgIHNoYWRvdy50ZXh0ID0gbGFiZWwudGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsYWJlbC50ZXh0ID0gXCJcIjtcbiAgICAgICAgc2hhZG93LnRleHQgPSBcIlwiO1xuICAgIH1cbn1cblxuIl19