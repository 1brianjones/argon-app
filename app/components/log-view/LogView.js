"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppViewModel_1 = require("../common/AppViewModel");
var color_1 = require("color");
var enums = require("ui/enums");
var label;
var shadow;
function onLayoutLoaded(args) {
    var layout = args.object;
    layout.backgroundColor = new color_1.Color('transparent');
    AppViewModel_1.appViewModel['getRecentLogItems'] = function () {
        updateLogListener(AppViewModel_1.appViewModel.layerDetails.log);
        return label.text;
    };
    AppViewModel_1.appViewModel.on('propertyChange', function (args) {
        if (args.propertyName === 'debugEnabled') {
            updateLogListener(AppViewModel_1.appViewModel.layerDetails.log);
        }
    });
    layout.bindingContext = AppViewModel_1.appViewModel;
}
exports.onLayoutLoaded = onLayoutLoaded;
function onLoaded(args) {
    label = args.object;
    label.verticalAlignment = enums.VerticalAlignment.bottom;
}
exports.onLoaded = onLoaded;
function onShadowLoaded(args) {
    shadow = args.object;
    shadow.verticalAlignment = enums.VerticalAlignment.bottom;
    shadow.translateX = 0.5;
    shadow.translateY = 0.5;
}
exports.onShadowLoaded = onShadowLoaded;
var currentLog;
function updateLogListener(log) {
    if (log === currentLog && AppViewModel_1.appViewModel.debugEnabled)
        return;
    if (currentLog) {
        currentLog.removeEventListener("change", updateLog);
        currentLog = undefined;
    }
    if (!log || !AppViewModel_1.appViewModel.debugEnabled)
        return;
    log.addEventListener('change', updateLog);
    currentLog = log;
    updateLog();
}
function updateLog() {
    if (currentLog && currentLog.length > 0) {
        var lines = [];
        loop: for (var l = currentLog.length - 1; l >= 0; l--) {
            var log = currentLog.getItem(l);
            lines.unshift.apply(lines, log.lines);
            if (lines.length > 50)
                break loop;
        }
        label.text = lines.join('\n');
        shadow.text = label.text;
    }
    else {
        label.text = "";
        shadow.text = "";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1REFBb0Q7QUFFcEQsK0JBQTRCO0FBQzVCLGdDQUFrQztBQUVsQyxJQUFJLEtBQVcsQ0FBQztBQUNoQixJQUFJLE1BQVksQ0FBQztBQUVqQix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxhQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEQsMkJBQVksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHO1FBQ2hDLGlCQUFpQixDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztJQUVGLDJCQUFZLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLFVBQUMsSUFBdUI7UUFDdEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLGlCQUFpQixDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sQ0FBQyxjQUFjLEdBQUcsMkJBQVksQ0FBQztBQUN6QyxDQUFDO0FBaEJELHdDQWdCQztBQUVELGtCQUF5QixJQUFJO0lBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQzdELENBQUM7QUFIRCw0QkFHQztBQUVELHdCQUErQixJQUFJO0lBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0lBQzFELE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQzVCLENBQUM7QUFMRCx3Q0FLQztBQUVELElBQUksVUFBNkMsQ0FBQztBQUVsRCwyQkFBMkIsR0FBNEI7SUFDbkQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFVBQVUsSUFBSSwyQkFBWSxDQUFDLFlBQVksQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUM1RCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2IsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDO1FBQUMsTUFBTSxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUNqQixTQUFTLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBRUQ7SUFDSSxFQUFFLENBQUMsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksS0FBSyxHQUFZLEVBQUUsQ0FBQztRQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xELElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLE9BQU8sT0FBYixLQUFLLEVBQVksR0FBRyxDQUFDLEtBQUssRUFBRTtZQUM1QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3RDLENBQUM7UUFDRCxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQcm9wZXJ0eUNoYW5nZURhdGF9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQge09ic2VydmFibGVBcnJheX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlLWFycmF5JztcbmltcG9ydCB7TGFiZWx9IGZyb20gJ3VpL2xhYmVsJztcbmltcG9ydCB7YXBwVmlld01vZGVsfSBmcm9tICcuLi9jb21tb24vQXBwVmlld01vZGVsJztcbmltcG9ydCB7TG9nSXRlbX0gZnJvbSAnYXJnb24td2ViLXZpZXcnO1xuaW1wb3J0IHtDb2xvcn0gZnJvbSAnY29sb3InO1xuaW1wb3J0ICogYXMgZW51bXMgZnJvbSAndWkvZW51bXMnO1xuXG5sZXQgbGFiZWw6TGFiZWw7XG5sZXQgc2hhZG93OkxhYmVsO1xuXG5leHBvcnQgZnVuY3Rpb24gb25MYXlvdXRMb2FkZWQoYXJncykge1xuICAgIGNvbnN0IGxheW91dCA9IGFyZ3Mub2JqZWN0O1xuICAgIGxheW91dC5iYWNrZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoJ3RyYW5zcGFyZW50Jyk7XG5cbiAgICBhcHBWaWV3TW9kZWxbJ2dldFJlY2VudExvZ0l0ZW1zJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdXBkYXRlTG9nTGlzdGVuZXIoYXBwVmlld01vZGVsLmxheWVyRGV0YWlscy5sb2cpO1xuICAgICAgICByZXR1cm4gbGFiZWwudGV4dDtcbiAgICB9O1xuICAgIFxuICAgIGFwcFZpZXdNb2RlbC5vbigncHJvcGVydHlDaGFuZ2UnLCAoYXJnczpQcm9wZXJ0eUNoYW5nZURhdGEpPT57XG4gICAgICAgIGlmIChhcmdzLnByb3BlcnR5TmFtZSA9PT0gJ2RlYnVnRW5hYmxlZCcpIHtcbiAgICAgICAgICAgIHVwZGF0ZUxvZ0xpc3RlbmVyKGFwcFZpZXdNb2RlbC5sYXllckRldGFpbHMubG9nKTtcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBsYXlvdXQuYmluZGluZ0NvbnRleHQgPSBhcHBWaWV3TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgbGFiZWwgPSBhcmdzLm9iamVjdDtcbiAgICBsYWJlbC52ZXJ0aWNhbEFsaWdubWVudCA9IGVudW1zLlZlcnRpY2FsQWxpZ25tZW50LmJvdHRvbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hhZG93TG9hZGVkKGFyZ3MpIHtcbiAgICBzaGFkb3cgPSBhcmdzLm9iamVjdDtcbiAgICBzaGFkb3cudmVydGljYWxBbGlnbm1lbnQgPSBlbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5ib3R0b207XG4gICAgc2hhZG93LnRyYW5zbGF0ZVggPSAwLjU7XG4gICAgc2hhZG93LnRyYW5zbGF0ZVkgPSAwLjU7XG59XG5cbmxldCBjdXJyZW50TG9nOk9ic2VydmFibGVBcnJheTxMb2dJdGVtPnx1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvZ0xpc3RlbmVyKGxvZzpPYnNlcnZhYmxlQXJyYXk8TG9nSXRlbT4pIHtcbiAgICBpZiAobG9nID09PSBjdXJyZW50TG9nICYmIGFwcFZpZXdNb2RlbC5kZWJ1Z0VuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoY3VycmVudExvZykge1xuICAgICAgICBjdXJyZW50TG9nLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdXBkYXRlTG9nKTtcbiAgICAgICAgY3VycmVudExvZyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFsb2cgfHwgIWFwcFZpZXdNb2RlbC5kZWJ1Z0VuYWJsZWQpIHJldHVybjtcbiAgICBsb2cuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlTG9nKTtcbiAgICBjdXJyZW50TG9nID0gbG9nO1xuICAgIHVwZGF0ZUxvZygpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVMb2coKSB7XG4gICAgaWYgKGN1cnJlbnRMb2cgJiYgY3VycmVudExvZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBsaW5lczpzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsb29wOiBmb3IgKHZhciBsID0gY3VycmVudExvZy5sZW5ndGgtMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgICAgICAgIHZhciBsb2cgPSBjdXJyZW50TG9nLmdldEl0ZW0obCk7XG4gICAgICAgICAgICBsaW5lcy51bnNoaWZ0KC4uLmxvZy5saW5lcyk7XG4gICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gNTApIGJyZWFrIGxvb3A7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwudGV4dCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgICBzaGFkb3cudGV4dCA9IGxhYmVsLnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWwudGV4dCA9IFwiXCI7XG4gICAgICAgIHNoYWRvdy50ZXh0ID0gXCJcIjtcbiAgICB9XG59XG5cbiJdfQ==