"use strict";
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var FavoritesViewModel = (function (_super) {
    __extends(FavoritesViewModel, _super);
    function FavoritesViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.favoriteList = bookmarks_1.favoriteList;
        return _this;
    }
    return FavoritesViewModel;
}(observable_1.Observable));
exports.FavoritesViewModel = FavoritesViewModel;
exports.viewModel = new FavoritesViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.favoriteList.indexOf(item);
    bookmarks_1.favoriteList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    // todo: fix for Android
    if (application.ios) {
        contentView.on(gestures_1.GestureTypes.pan, function (data) {
            if (data.state === gestures_1.GestureStateTypes.began) {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
            contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
            if (data.state === gestures_1.GestureStateTypes.ended) {
                editing = false;
                var open = contentView.translateX < swipeLimit * 0.75;
                toggleCellSwipeState(cell, open);
            }
            else {
                deleteView.visibility = 'visible';
            }
        });
    }
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmF2b3JpdGVzVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZhdm9yaXRlc1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlDQUEyQztBQUMzQyw4Q0FBMkM7QUFHM0MsaURBQThEO0FBQzlELHVEQUFtRDtBQUVuRCx3Q0FLcUI7QUFFckIsa0NBQXVDO0FBRXZDO0lBQXdDLHNDQUFVO0lBQWxEO1FBQUEscUVBRUM7UUFERyxrQkFBWSxHQUFHLHdCQUFZLENBQUM7O0lBQ2hDLENBQUM7SUFBRCx5QkFBQztBQUFELENBQUMsQUFGRCxDQUF3Qyx1QkFBVSxHQUVqRDtBQUZZLGdEQUFrQjtBQUdsQixRQUFBLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7QUFFbEQsSUFBSSxRQUFpQixDQUFDO0FBQ3RCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUVwQixrQkFBeUIsSUFBSTtJQUN6QixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixRQUFRLENBQUMsY0FBYyxHQUFHLGlCQUFTLENBQUM7QUFDeEMsQ0FBQztBQUhELDRCQUdDO0FBRUQsZUFBc0IsSUFBSTtJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFBQyxNQUFNLENBQUE7SUFDbkIsYUFBYSxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLEdBQWlCLElBQUksQ0FBQyxNQUFlLENBQUMsY0FBYyxDQUFDO0lBQzdELDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBTEQsc0JBS0M7QUFFRCxrQkFBeUIsSUFBSTtJQUN6QixhQUFhLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQUksR0FBaUIsSUFBSSxDQUFDLE1BQWUsQ0FBQyxjQUFjLENBQUM7SUFDN0QsSUFBSSxDQUFDLEdBQUcsd0JBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsd0JBQVksQ0FBQyxN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Q1AsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcGxpY2F0aW9uIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7Vmlld30gZnJvbSAndWkvY29yZS92aWV3JztcbmltcG9ydCB7TGlzdFZpZXcsSXRlbUV2ZW50RGF0YX0gZnJvbSAndWkvbGlzdC12aWV3JztcbmltcG9ydCB7Qm9va21hcmtJdGVtLCBmYXZvcml0ZUxpc3R9IGZyb20gJy4uL2NvbW1vbi9ib29rbWFya3MnXG5pbXBvcnQge2FwcFZpZXdNb2RlbH0gZnJvbSAnLi4vY29tbW9uL0FwcFZpZXdNb2RlbCdcblxuaW1wb3J0IHtcbiAgR2VzdHVyZVR5cGVzLFxuICBHZXN0dXJlU3RhdGVUeXBlcyxcbiAgUGFuR2VzdHVyZUV2ZW50RGF0YSxcbiAgR2VzdHVyZUV2ZW50RGF0YSxcbn0gZnJvbSAndWkvZ2VzdHVyZXMnO1xuXG5pbXBvcnQge0FuaW1hdGlvbkN1cnZlfSBmcm9tICd1aS9lbnVtcydcblxuZXhwb3J0IGNsYXNzIEZhdm9yaXRlc1ZpZXdNb2RlbCBleHRlbmRzIE9ic2VydmFibGUge1xuICAgIGZhdm9yaXRlTGlzdCA9IGZhdm9yaXRlTGlzdDtcbn1cbmV4cG9ydCBjb25zdCB2aWV3TW9kZWwgPSBuZXcgRmF2b3JpdGVzVmlld01vZGVsKCk7XG5cbmxldCBsaXN0VmlldzpMaXN0VmlldztcbmxldCBlZGl0aW5nID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgbGlzdFZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICBsaXN0Vmlldy5iaW5kaW5nQ29udGV4dCA9IHZpZXdNb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwKGFyZ3MpIHtcbiAgICBpZiAoZWRpdGluZykgcmV0dXJuXG4gICAgY2xvc2VBbGxDZWxscygpO1xuICAgIHZhciBpdGVtOkJvb2ttYXJrSXRlbSA9IChhcmdzLm9iamVjdCBhcyBWaWV3KS5iaW5kaW5nQ29udGV4dDtcbiAgICBhcHBWaWV3TW9kZWwubG9hZFVybChpdGVtLnVyaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRlbGV0ZShhcmdzKSB7XG4gICAgY2xvc2VBbGxDZWxscygpO1xuICAgIHZhciBpdGVtOkJvb2ttYXJrSXRlbSA9IChhcmdzLm9iamVjdCBhcyBWaWV3KS5iaW5kaW5nQ29udGV4dDtcbiAgICB2YXIgaSA9IGZhdm9yaXRlTGlzdC5pbmRleE9mKGl0ZW0pO1xuICAgIGZhdm9yaXRlTGlzdC5zcGxpY2UoaSwgMSk7XG59XG5cbmNvbnN0IHN3aXBlTGltaXQgPSAtNjQ7XG5cbmludGVyZmFjZSBDZWxsVmlld3Mge1xuICAgIGNvbnRlbnRWaWV3OlZpZXcsIFxuICAgIGRlbGV0ZVZpZXc6Vmlld1xufVxuXG5sZXQgb3BlbkNlbGxzOkFycmF5PENlbGxWaWV3cz4gPSBbXVxuXG5leHBvcnQgZnVuY3Rpb24gb25JdGVtTG9hZGVkKGFyZ3MpIHtcbiAgICB2YXIgaXRlbVZpZXc6VmlldyA9IGFyZ3Mub2JqZWN0O1xuICAgIHZhciBjb250ZW50VmlldyA9IGl0ZW1WaWV3LmdldFZpZXdCeUlkKCdjb250ZW50Jyk7XG4gICAgdmFyIGRlbGV0ZVZpZXcgPSBpdGVtVmlldy5nZXRWaWV3QnlJZCgnZGVsZXRlJyk7XG4gICAgdmFyIGNlbGwgPSB7Y29udGVudFZpZXcsIGRlbGV0ZVZpZXd9O1xuICAgIFxuICAgIHZhciBwYW5TdGFydD0wO1xuICAgIC8vIHRvZG86IGZpeCBmb3IgQW5kcm9pZFxuICAgIGlmIChhcHBsaWNhdGlvbi5pb3MpIHtcbiAgICAgICAgY29udGVudFZpZXcub24oR2VzdHVyZVR5cGVzLnBhbiwgKGRhdGE6UGFuR2VzdHVyZUV2ZW50RGF0YSk9PntcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGEuc3RhdGUgPT09IEdlc3R1cmVTdGF0ZVR5cGVzLmJlZ2FuKSB7XG4gICAgICAgICAgICAgICAgcGFuU3RhcnQgPSBjb250ZW50Vmlldy50cmFuc2xhdGVYO1xuICAgICAgICAgICAgICAgIGNsb3NlQWxsQ2VsbHMoY2VsbCk7XG4gICAgICAgICAgICAgICAgZWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPSBNYXRoLm1pbihNYXRoLm1heChwYW5TdGFydCArIGRhdGEuZGVsdGFYLCAtMTAwMCksIDApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0ZSA9PT0gR2VzdHVyZVN0YXRlVHlwZXMuZW5kZWQpIHtcbiAgICAgICAgICAgICAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIG9wZW4gPSBjb250ZW50Vmlldy50cmFuc2xhdGVYIDwgc3dpcGVMaW1pdCowLjc1O1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNlbGxTd2lwZVN0YXRlKGNlbGwsIG9wZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGVWaWV3LnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsb3NlQWxsQ2VsbHMoZXhjZXB0Q2VsbD86Q2VsbFZpZXdzKSB7XG4gICAgb3BlbkNlbGxzLmZvckVhY2goKGNlbGwpPT57XG4gICAgICAgIGlmIChjZWxsICE9PSBleGNlcHRDZWxsKSB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsLCBmYWxzZSk7XG4gICAgfSlcbiAgICBvcGVuQ2VsbHMgPSBleGNlcHRDZWxsID8gW2V4Y2VwdENlbGxdIDogW107XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNlbGxTd2lwZVN0YXRlKGNlbGw6Q2VsbFZpZXdzLCBvcGVuOmJvb2xlYW4pIHtcbiAgICBjb25zdCBmaW5hbFRyYW5zbGF0ZVggPSBvcGVuID8gc3dpcGVMaW1pdCA6IDBcbiAgICBjZWxsLmNvbnRlbnRWaWV3LmFuaW1hdGUoe1xuICAgICAgICB0cmFuc2xhdGU6e3g6ZmluYWxUcmFuc2xhdGVYLCB5OjB9LFxuICAgICAgICBjdXJ2ZTogQW5pbWF0aW9uQ3VydmUuZWFzZUluT3V0XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICBjZWxsLmNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPSBmaW5hbFRyYW5zbGF0ZVg7XG4gICAgICAgIGlmICghb3BlbikgY2VsbC5kZWxldGVWaWV3LnZpc2liaWxpdHkgPSAnY29sbGFwc2UnO1xuICAgIH0pO1xuICAgIGlmIChvcGVuKSB7XG4gICAgICAgIG9wZW5DZWxscy5wdXNoKGNlbGwpO1xuICAgIH1cbn0iXX0=