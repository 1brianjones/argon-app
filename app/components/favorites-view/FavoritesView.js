"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var FavoritesViewModel = (function (_super) {
    __extends(FavoritesViewModel, _super);
    function FavoritesViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.favoriteList = bookmarks_1.favoriteList;
        return _this;
    }
    return FavoritesViewModel;
}(observable_1.Observable));
exports.FavoritesViewModel = FavoritesViewModel;
exports.viewModel = new FavoritesViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.favoriteList.indexOf(item);
    bookmarks_1.favoriteList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    // todo: fix for Android
    if (application.ios) {
        contentView.on(gestures_1.GestureTypes.pan, function (data) {
            if (data.state === gestures_1.GestureStateTypes.began) {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
            contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
            if (data.state === gestures_1.GestureStateTypes.ended) {
                editing = false;
                var open = contentView.translateX < swipeLimit * 0.75;
                toggleCellSwipeState(cell, open);
            }
            else {
                deleteView.visibility = 'visible';
            }
        });
    }
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmF2b3JpdGVzVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZhdm9yaXRlc1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBMkM7QUFDM0MsOENBQTJDO0FBRzNDLGlEQUE4RDtBQUM5RCx1REFBbUQ7QUFFbkQsd0NBSXFCO0FBRXJCLGtDQUF1QztBQUV2QztJQUF3QyxzQ0FBVTtJQUFsRDtRQUFBLHFFQUVDO1FBREcsa0JBQVksR0FBRyx3QkFBWSxDQUFDOztJQUNoQyxDQUFDO0lBQUQseUJBQUM7QUFBRCxDQUFDLEFBRkQsQ0FBd0MsdUJBQVUsR0FFakQ7QUFGWSxnREFBa0I7QUFHbEIsUUFBQSxTQUFTLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO0FBRWxELElBQUksUUFBaUIsQ0FBQztBQUN0QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFcEIsa0JBQXlCLElBQUk7SUFDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsUUFBUSxDQUFDLGNBQWMsR0FBRyxpQkFBUyxDQUFDO0FBQ3hDLENBQUM7QUFIRCw0QkFHQztBQUVELGVBQXNCLElBQUk7SUFDdEIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQUMsTUFBTSxDQUFBO0lBQ25CLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLElBQUksSUFBSSxHQUFpQixJQUFJLENBQUMsTUFBZSxDQUFDLGNBQWMsQ0FBQztJQUM3RCwyQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUxELHNCQUtDO0FBRUQsa0JBQXlCLElBQUk7SUFDekIsYUFBYSxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLEdBQWlCLElBQUksQ0FBQyxNQUFlLENBQUMsY0FBYyxDQUFDO0lBQzdELElBQUksQ0FBQyxHQUFHLHdCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLHdCQUFZLENBQUMs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QUNQLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tICdhcHBsaWNhdGlvbic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQge1ZpZXd9IGZyb20gJ3VpL2NvcmUvdmlldyc7XG5pbXBvcnQge0xpc3RWaWV3fSBmcm9tICd1aS9saXN0LXZpZXcnO1xuaW1wb3J0IHtCb29rbWFya0l0ZW0sIGZhdm9yaXRlTGlzdH0gZnJvbSAnLi4vY29tbW9uL2Jvb2ttYXJrcydcbmltcG9ydCB7YXBwVmlld01vZGVsfSBmcm9tICcuLi9jb21tb24vQXBwVmlld01vZGVsJ1xuXG5pbXBvcnQge1xuICBHZXN0dXJlVHlwZXMsXG4gIEdlc3R1cmVTdGF0ZVR5cGVzLFxuICBQYW5HZXN0dXJlRXZlbnREYXRhLFxufSBmcm9tICd1aS9nZXN0dXJlcyc7XG5cbmltcG9ydCB7QW5pbWF0aW9uQ3VydmV9IGZyb20gJ3VpL2VudW1zJ1xuXG5leHBvcnQgY2xhc3MgRmF2b3JpdGVzVmlld01vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgZmF2b3JpdGVMaXN0ID0gZmF2b3JpdGVMaXN0O1xufVxuZXhwb3J0IGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBGYXZvcml0ZXNWaWV3TW9kZWwoKTtcblxubGV0IGxpc3RWaWV3Okxpc3RWaWV3O1xubGV0IGVkaXRpbmcgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZGVkKGFyZ3MpIHtcbiAgICBsaXN0VmlldyA9IGFyZ3Mub2JqZWN0O1xuICAgIGxpc3RWaWV3LmJpbmRpbmdDb250ZXh0ID0gdmlld01vZGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25UYXAoYXJncykge1xuICAgIGlmIChlZGl0aW5nKSByZXR1cm5cbiAgICBjbG9zZUFsbENlbGxzKCk7XG4gICAgdmFyIGl0ZW06Qm9va21hcmtJdGVtID0gKGFyZ3Mub2JqZWN0IGFzIFZpZXcpLmJpbmRpbmdDb250ZXh0O1xuICAgIGFwcFZpZXdNb2RlbC5sb2FkVXJsKGl0ZW0udXJpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uRGVsZXRlKGFyZ3MpIHtcbiAgICBjbG9zZUFsbENlbGxzKCk7XG4gICAgdmFyIGl0ZW06Qm9va21hcmtJdGVtID0gKGFyZ3Mub2JqZWN0IGFzIFZpZXcpLmJpbmRpbmdDb250ZXh0O1xuICAgIHZhciBpID0gZmF2b3JpdGVMaXN0LmluZGV4T2YoaXRlbSk7XG4gICAgZmF2b3JpdGVMaXN0LnNwbGljZShpLCAxKTtcbn1cblxuY29uc3Qgc3dpcGVMaW1pdCA9IC02NDtcblxuaW50ZXJmYWNlIENlbGxWaWV3cyB7XG4gICAgY29udGVudFZpZXc6VmlldywgXG4gICAgZGVsZXRlVmlldzpWaWV3XG59XG5cbmxldCBvcGVuQ2VsbHM6QXJyYXk8Q2VsbFZpZXdzPiA9IFtdXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1Mb2FkZWQoYXJncykge1xuICAgIHZhciBpdGVtVmlldzpWaWV3ID0gYXJncy5vYmplY3Q7XG4gICAgdmFyIGNvbnRlbnRWaWV3ID0gaXRlbVZpZXcuZ2V0Vmlld0J5SWQoJ2NvbnRlbnQnKTtcbiAgICB2YXIgZGVsZXRlVmlldyA9IGl0ZW1WaWV3LmdldFZpZXdCeUlkKCdkZWxldGUnKTtcbiAgICB2YXIgY2VsbCA9IHtjb250ZW50VmlldywgZGVsZXRlVmlld307XG4gICAgXG4gICAgdmFyIHBhblN0YXJ0PTA7XG4gICAgLy8gdG9kbzogZml4IGZvciBBbmRyb2lkXG4gICAgaWYgKGFwcGxpY2F0aW9uLmlvcykge1xuICAgICAgICBjb250ZW50Vmlldy5vbihHZXN0dXJlVHlwZXMucGFuLCAoZGF0YTpQYW5HZXN0dXJlRXZlbnREYXRhKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0ZSA9PT0gR2VzdHVyZVN0YXRlVHlwZXMuYmVnYW4pIHtcbiAgICAgICAgICAgICAgICBwYW5TdGFydCA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVg7XG4gICAgICAgICAgICAgICAgY2xvc2VBbGxDZWxscyhjZWxsKTtcbiAgICAgICAgICAgICAgICBlZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGVudFZpZXcudHJhbnNsYXRlWCA9IE1hdGgubWluKE1hdGgubWF4KHBhblN0YXJ0ICsgZGF0YS5kZWx0YVgsIC0xMDAwKSwgMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlID09PSBHZXN0dXJlU3RhdGVUeXBlcy5lbmRlZCkge1xuICAgICAgICAgICAgICAgIGVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgb3BlbiA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPCBzd2lwZUxpbWl0KjAuNzU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbCwgb3Blbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VBbGxDZWxscyhleGNlcHRDZWxsPzpDZWxsVmlld3MpIHtcbiAgICBvcGVuQ2VsbHMuZm9yRWFjaCgoY2VsbCk9PntcbiAgICAgICAgaWYgKGNlbGwgIT09IGV4Y2VwdENlbGwpIHRvZ2dsZUNlbGxTd2lwZVN0YXRlKGNlbGwsIGZhbHNlKTtcbiAgICB9KVxuICAgIG9wZW5DZWxscyA9IGV4Y2VwdENlbGwgPyBbZXhjZXB0Q2VsbF0gOiBbXTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbDpDZWxsVmlld3MsIG9wZW46Ym9vbGVhbikge1xuICAgIGNvbnN0IGZpbmFsVHJhbnNsYXRlWCA9IG9wZW4gPyBzd2lwZUxpbWl0IDogMFxuICAgIGNlbGwuY29udGVudFZpZXcuYW5pbWF0ZSh7XG4gICAgICAgIHRyYW5zbGF0ZTp7eDpmaW5hbFRyYW5zbGF0ZVgsIHk6MH0sXG4gICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlSW5PdXRcbiAgICB9KS50aGVuKCgpPT57XG4gICAgICAgIGNlbGwuY29udGVudFZpZXcudHJhbnNsYXRlWCA9IGZpbmFsVHJhbnNsYXRlWDtcbiAgICAgICAgaWYgKCFvcGVuKSBjZWxsLmRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICdjb2xsYXBzZSc7XG4gICAgfSk7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgICAgb3BlbkNlbGxzLnB1c2goY2VsbCk7XG4gICAgfVxufSJdfQ==