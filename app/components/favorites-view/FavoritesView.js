"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var FavoritesViewModel = (function (_super) {
    __extends(FavoritesViewModel, _super);
    function FavoritesViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.favoriteList = bookmarks_1.favoriteList;
        return _this;
    }
    return FavoritesViewModel;
}(observable_1.Observable));
exports.FavoritesViewModel = FavoritesViewModel;
exports.viewModel = new FavoritesViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.favoriteList.indexOf(item);
    bookmarks_1.favoriteList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    contentView.on(gestures_1.GestureTypes.pan, function (data) {
        if (data.state === gestures_1.GestureStateTypes.began) {
            panStart = contentView.translateX;
            closeAllCells(cell);
            editing = true;
        }
        contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
        if (data.state === gestures_1.GestureStateTypes.ended) {
            editing = false;
            var open = contentView.translateX < swipeLimit * 0.75;
            toggleCellSwipeState(cell, open);
        }
        else {
            deleteView.visibility = 'visible';
        }
    });
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmF2b3JpdGVzVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZhdm9yaXRlc1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBMkM7QUFHM0MsaURBQThEO0FBQzlELHVEQUFtRDtBQUVuRCx3Q0FJcUI7QUFFckIsa0NBQXVDO0FBRXZDO0lBQXdDLHNDQUFVO0lBQWxEO1FBQUEscUVBRUM7UUFERyxrQkFBWSxHQUFHLHdCQUFZLENBQUM7O0lBQ2hDLENBQUM7SUFBRCx5QkFBQztBQUFELENBQUMsQUFGRCxDQUF3Qyx1QkFBVSxHQUVqRDtBQUZZLGdEQUFrQjtBQUdsQixRQUFBLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7QUFFbEQsSUFBSSxRQUFpQixDQUFDO0FBQ3RCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUVwQixrQkFBeUIsSUFBSTtJQUN6QixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixRQUFRLENBQUMsY0FBYyxHQUFHLGlCQUFTLENBQUM7QUFDeEMsQ0FBQztBQUhELDRCQUdDO0FBRUQsZUFBc0IsSUFBSTtJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFBQyxNQUFNLENBQUE7SUFDbkIsYUFBYSxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLEdBQWlCLElBQUksQ0FBQyxNQUFlLENBQUMsY0FBYyxDQUFDO0lBQzdELDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBTEQsc0JBS0M7QUFFRCxrQkFBeUIsSUFBSTtJQUN6QixhQUFhLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQUksR0FBaUIsSUFBSSxDQUFDLE1BQWUsQ0FBQyxjQUFjLENBQUM7SUFDN0QsSUFBSSxDQUFDLEdBQUcsd0JBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsd0JBQVksQ0FBQyxNQUFNLENBQUMsQ0FB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YWJsZX0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7Vmlld30gZnJvbSAndWkvY29yZS92aWV3JztcbmltcG9ydCB7TGlzdFZpZXd9IGZyb20gJ3VpL2xpc3Qtdmlldyc7XG5pbXBvcnQge0Jvb2ttYXJrSXRlbSwgZmF2b3JpdGVMaXN0fSBmcm9tICcuLi9jb21tb24vYm9va21hcmtzJ1xuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnXG5cbmltcG9ydCB7XG4gIEdlc3R1cmVUeXBlcyxcbiAgR2VzdHVyZVN0YXRlVHlwZXMsXG4gIFBhbkdlc3R1cmVFdmVudERhdGEsXG59IGZyb20gJ3VpL2dlc3R1cmVzJztcblxuaW1wb3J0IHtBbmltYXRpb25DdXJ2ZX0gZnJvbSAndWkvZW51bXMnXG5cbmV4cG9ydCBjbGFzcyBGYXZvcml0ZXNWaWV3TW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgICBmYXZvcml0ZUxpc3QgPSBmYXZvcml0ZUxpc3Q7XG59XG5leHBvcnQgY29uc3Qgdmlld01vZGVsID0gbmV3IEZhdm9yaXRlc1ZpZXdNb2RlbCgpO1xuXG5sZXQgbGlzdFZpZXc6TGlzdFZpZXc7XG5sZXQgZWRpdGluZyA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoYXJncykge1xuICAgIGxpc3RWaWV3ID0gYXJncy5vYmplY3Q7XG4gICAgbGlzdFZpZXcuYmluZGluZ0NvbnRleHQgPSB2aWV3TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhcChhcmdzKSB7XG4gICAgaWYgKGVkaXRpbmcpIHJldHVyblxuICAgIGNsb3NlQWxsQ2VsbHMoKTtcbiAgICB2YXIgaXRlbTpCb29rbWFya0l0ZW0gPSAoYXJncy5vYmplY3QgYXMgVmlldykuYmluZGluZ0NvbnRleHQ7XG4gICAgYXBwVmlld01vZGVsLmxvYWRVcmwoaXRlbS51cmkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWxldGUoYXJncykge1xuICAgIGNsb3NlQWxsQ2VsbHMoKTtcbiAgICB2YXIgaXRlbTpCb29rbWFya0l0ZW0gPSAoYXJncy5vYmplY3QgYXMgVmlldykuYmluZGluZ0NvbnRleHQ7XG4gICAgdmFyIGkgPSBmYXZvcml0ZUxpc3QuaW5kZXhPZihpdGVtKTtcbiAgICBmYXZvcml0ZUxpc3Quc3BsaWNlKGksIDEpO1xufVxuXG5jb25zdCBzd2lwZUxpbWl0ID0gLTY0O1xuXG5pbnRlcmZhY2UgQ2VsbFZpZXdzIHtcbiAgICBjb250ZW50VmlldzpWaWV3LCBcbiAgICBkZWxldGVWaWV3OlZpZXdcbn1cblxubGV0IG9wZW5DZWxsczpBcnJheTxDZWxsVmlld3M+ID0gW11cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbUxvYWRlZChhcmdzKSB7XG4gICAgdmFyIGl0ZW1WaWV3OlZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgY29udGVudFZpZXcgPSBpdGVtVmlldy5nZXRWaWV3QnlJZCgnY29udGVudCcpO1xuICAgIHZhciBkZWxldGVWaWV3ID0gaXRlbVZpZXcuZ2V0Vmlld0J5SWQoJ2RlbGV0ZScpO1xuICAgIHZhciBjZWxsID0ge2NvbnRlbnRWaWV3LCBkZWxldGVWaWV3fTtcbiAgICBcbiAgICB2YXIgcGFuU3RhcnQ9MDtcbiAgICBjb250ZW50Vmlldy5vbihHZXN0dXJlVHlwZXMucGFuLCAoZGF0YTpQYW5HZXN0dXJlRXZlbnREYXRhKT0+e1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEuc3RhdGUgPT09IEdlc3R1cmVTdGF0ZVR5cGVzLmJlZ2FuKSB7XG4gICAgICAgICAgICBwYW5TdGFydCA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVg7XG4gICAgICAgICAgICBjbG9zZUFsbENlbGxzKGNlbGwpO1xuICAgICAgICAgICAgZWRpdGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPSBNYXRoLm1pbihNYXRoLm1heChwYW5TdGFydCArIGRhdGEuZGVsdGFYLCAtMTAwMCksIDApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEuc3RhdGUgPT09IEdlc3R1cmVTdGF0ZVR5cGVzLmVuZGVkKSB7XG4gICAgICAgICAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgb3BlbiA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPCBzd2lwZUxpbWl0KjAuNzU7XG4gICAgICAgICAgICB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsLCBvcGVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjbG9zZUFsbENlbGxzKGV4Y2VwdENlbGw/OkNlbGxWaWV3cykge1xuICAgIG9wZW5DZWxscy5mb3JFYWNoKChjZWxsKT0+e1xuICAgICAgICBpZiAoY2VsbCAhPT0gZXhjZXB0Q2VsbCkgdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbCwgZmFsc2UpO1xuICAgIH0pXG4gICAgb3BlbkNlbGxzID0gZXhjZXB0Q2VsbCA/IFtleGNlcHRDZWxsXSA6IFtdO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsOkNlbGxWaWV3cywgb3Blbjpib29sZWFuKSB7XG4gICAgY29uc3QgZmluYWxUcmFuc2xhdGVYID0gb3BlbiA/IHN3aXBlTGltaXQgOiAwXG4gICAgY2VsbC5jb250ZW50Vmlldy5hbmltYXRlKHtcbiAgICAgICAgdHJhbnNsYXRlOnt4OmZpbmFsVHJhbnNsYXRlWCwgeTowfSxcbiAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmVhc2VJbk91dFxuICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgY2VsbC5jb250ZW50Vmlldy50cmFuc2xhdGVYID0gZmluYWxUcmFuc2xhdGVYO1xuICAgICAgICBpZiAoIW9wZW4pIGNlbGwuZGVsZXRlVmlldy52aXNpYmlsaXR5ID0gJ2NvbGxhcHNlJztcbiAgICB9KTtcbiAgICBpZiAob3Blbikge1xuICAgICAgICBvcGVuQ2VsbHMucHVzaChjZWxsKTtcbiAgICB9XG59Il19